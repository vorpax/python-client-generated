# coding: utf-8

"""
    Services API Géorisques

    Description de l'API de Géorisques  # noqa: E501

    OpenAPI spec version: 1.9.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RisquesTechnologiquesDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'icpe': 'RisqueDto',
        'nucleaire': 'RisqueDto',
        'canalisations_matieres_dangereuses': 'RisqueDto',
        'pollution_sols': 'RisqueDto',
        'rupture_barrage': 'RisqueDto',
        'risque_minier': 'RisqueDto'
    }

    attribute_map = {
        'icpe': 'icpe',
        'nucleaire': 'nucleaire',
        'canalisations_matieres_dangereuses': 'canalisationsMatieresDangereuses',
        'pollution_sols': 'pollutionSols',
        'rupture_barrage': 'ruptureBarrage',
        'risque_minier': 'risqueMinier'
    }

    def __init__(self, icpe=None, nucleaire=None, canalisations_matieres_dangereuses=None, pollution_sols=None, rupture_barrage=None, risque_minier=None):  # noqa: E501
        """RisquesTechnologiquesDto - a model defined in Swagger"""  # noqa: E501
        self._icpe = None
        self._nucleaire = None
        self._canalisations_matieres_dangereuses = None
        self._pollution_sols = None
        self._rupture_barrage = None
        self._risque_minier = None
        self.discriminator = None
        if icpe is not None:
            self.icpe = icpe
        if nucleaire is not None:
            self.nucleaire = nucleaire
        if canalisations_matieres_dangereuses is not None:
            self.canalisations_matieres_dangereuses = canalisations_matieres_dangereuses
        if pollution_sols is not None:
            self.pollution_sols = pollution_sols
        if rupture_barrage is not None:
            self.rupture_barrage = rupture_barrage
        if risque_minier is not None:
            self.risque_minier = risque_minier

    @property
    def icpe(self):
        """Gets the icpe of this RisquesTechnologiquesDto.  # noqa: E501


        :return: The icpe of this RisquesTechnologiquesDto.  # noqa: E501
        :rtype: RisqueDto
        """
        return self._icpe

    @icpe.setter
    def icpe(self, icpe):
        """Sets the icpe of this RisquesTechnologiquesDto.


        :param icpe: The icpe of this RisquesTechnologiquesDto.  # noqa: E501
        :type: RisqueDto
        """

        self._icpe = icpe

    @property
    def nucleaire(self):
        """Gets the nucleaire of this RisquesTechnologiquesDto.  # noqa: E501


        :return: The nucleaire of this RisquesTechnologiquesDto.  # noqa: E501
        :rtype: RisqueDto
        """
        return self._nucleaire

    @nucleaire.setter
    def nucleaire(self, nucleaire):
        """Sets the nucleaire of this RisquesTechnologiquesDto.


        :param nucleaire: The nucleaire of this RisquesTechnologiquesDto.  # noqa: E501
        :type: RisqueDto
        """

        self._nucleaire = nucleaire

    @property
    def canalisations_matieres_dangereuses(self):
        """Gets the canalisations_matieres_dangereuses of this RisquesTechnologiquesDto.  # noqa: E501


        :return: The canalisations_matieres_dangereuses of this RisquesTechnologiquesDto.  # noqa: E501
        :rtype: RisqueDto
        """
        return self._canalisations_matieres_dangereuses

    @canalisations_matieres_dangereuses.setter
    def canalisations_matieres_dangereuses(self, canalisations_matieres_dangereuses):
        """Sets the canalisations_matieres_dangereuses of this RisquesTechnologiquesDto.


        :param canalisations_matieres_dangereuses: The canalisations_matieres_dangereuses of this RisquesTechnologiquesDto.  # noqa: E501
        :type: RisqueDto
        """

        self._canalisations_matieres_dangereuses = canalisations_matieres_dangereuses

    @property
    def pollution_sols(self):
        """Gets the pollution_sols of this RisquesTechnologiquesDto.  # noqa: E501


        :return: The pollution_sols of this RisquesTechnologiquesDto.  # noqa: E501
        :rtype: RisqueDto
        """
        return self._pollution_sols

    @pollution_sols.setter
    def pollution_sols(self, pollution_sols):
        """Sets the pollution_sols of this RisquesTechnologiquesDto.


        :param pollution_sols: The pollution_sols of this RisquesTechnologiquesDto.  # noqa: E501
        :type: RisqueDto
        """

        self._pollution_sols = pollution_sols

    @property
    def rupture_barrage(self):
        """Gets the rupture_barrage of this RisquesTechnologiquesDto.  # noqa: E501


        :return: The rupture_barrage of this RisquesTechnologiquesDto.  # noqa: E501
        :rtype: RisqueDto
        """
        return self._rupture_barrage

    @rupture_barrage.setter
    def rupture_barrage(self, rupture_barrage):
        """Sets the rupture_barrage of this RisquesTechnologiquesDto.


        :param rupture_barrage: The rupture_barrage of this RisquesTechnologiquesDto.  # noqa: E501
        :type: RisqueDto
        """

        self._rupture_barrage = rupture_barrage

    @property
    def risque_minier(self):
        """Gets the risque_minier of this RisquesTechnologiquesDto.  # noqa: E501


        :return: The risque_minier of this RisquesTechnologiquesDto.  # noqa: E501
        :rtype: RisqueDto
        """
        return self._risque_minier

    @risque_minier.setter
    def risque_minier(self, risque_minier):
        """Sets the risque_minier of this RisquesTechnologiquesDto.


        :param risque_minier: The risque_minier of this RisquesTechnologiquesDto.  # noqa: E501
        :type: RisqueDto
        """

        self._risque_minier = risque_minier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RisquesTechnologiquesDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RisquesTechnologiquesDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
