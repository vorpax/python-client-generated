# coding: utf-8

"""
    Services API Géorisques

    Description de l'API de Géorisques  # noqa: E501

    OpenAPI spec version: 1.9.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExBasolDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'adresse': 'str',
        'statut': 'str',
        'geom': 'OneOfExBasolDtoGeom',
        'identifiant_ssp': 'str',
        'adresse_lieudit': 'str',
        'code_insee': 'str',
        'nom_etablissement': 'str',
        'nom_commune': 'str',
        'fiche_risque': 'str',
        'date_maj': 'str'
    }

    attribute_map = {
        'adresse': 'adresse',
        'statut': 'statut',
        'geom': 'geom',
        'identifiant_ssp': 'identifiant_ssp',
        'adresse_lieudit': 'adresse_lieudit',
        'code_insee': 'code_insee',
        'nom_etablissement': 'nom_etablissement',
        'nom_commune': 'nom_commune',
        'fiche_risque': 'fiche_risque',
        'date_maj': 'date_maj'
    }

    def __init__(self, adresse=None, statut=None, geom=None, identifiant_ssp=None, adresse_lieudit=None, code_insee=None, nom_etablissement=None, nom_commune=None, fiche_risque=None, date_maj=None):  # noqa: E501
        """ExBasolDto - a model defined in Swagger"""  # noqa: E501
        self._adresse = None
        self._statut = None
        self._geom = None
        self._identifiant_ssp = None
        self._adresse_lieudit = None
        self._code_insee = None
        self._nom_etablissement = None
        self._nom_commune = None
        self._fiche_risque = None
        self._date_maj = None
        self.discriminator = None
        if adresse is not None:
            self.adresse = adresse
        if statut is not None:
            self.statut = statut
        if geom is not None:
            self.geom = geom
        if identifiant_ssp is not None:
            self.identifiant_ssp = identifiant_ssp
        if adresse_lieudit is not None:
            self.adresse_lieudit = adresse_lieudit
        if code_insee is not None:
            self.code_insee = code_insee
        if nom_etablissement is not None:
            self.nom_etablissement = nom_etablissement
        if nom_commune is not None:
            self.nom_commune = nom_commune
        if fiche_risque is not None:
            self.fiche_risque = fiche_risque
        if date_maj is not None:
            self.date_maj = date_maj

    @property
    def adresse(self):
        """Gets the adresse of this ExBasolDto.  # noqa: E501

        Adresse du ex-BASOL  # noqa: E501

        :return: The adresse of this ExBasolDto.  # noqa: E501
        :rtype: str
        """
        return self._adresse

    @adresse.setter
    def adresse(self, adresse):
        """Sets the adresse of this ExBasolDto.

        Adresse du ex-BASOL  # noqa: E501

        :param adresse: The adresse of this ExBasolDto.  # noqa: E501
        :type: str
        """

        self._adresse = adresse

    @property
    def statut(self):
        """Gets the statut of this ExBasolDto.  # noqa: E501

        Statut de l'instruction  # noqa: E501

        :return: The statut of this ExBasolDto.  # noqa: E501
        :rtype: str
        """
        return self._statut

    @statut.setter
    def statut(self, statut):
        """Sets the statut of this ExBasolDto.

        Statut de l'instruction  # noqa: E501

        :param statut: The statut of this ExBasolDto.  # noqa: E501
        :type: str
        """

        self._statut = statut

    @property
    def geom(self):
        """Gets the geom of this ExBasolDto.  # noqa: E501


        :return: The geom of this ExBasolDto.  # noqa: E501
        :rtype: OneOfExBasolDtoGeom
        """
        return self._geom

    @geom.setter
    def geom(self, geom):
        """Sets the geom of this ExBasolDto.


        :param geom: The geom of this ExBasolDto.  # noqa: E501
        :type: OneOfExBasolDtoGeom
        """

        self._geom = geom

    @property
    def identifiant_ssp(self):
        """Gets the identifiant_ssp of this ExBasolDto.  # noqa: E501

        Identifiant unique du SSP  # noqa: E501

        :return: The identifiant_ssp of this ExBasolDto.  # noqa: E501
        :rtype: str
        """
        return self._identifiant_ssp

    @identifiant_ssp.setter
    def identifiant_ssp(self, identifiant_ssp):
        """Sets the identifiant_ssp of this ExBasolDto.

        Identifiant unique du SSP  # noqa: E501

        :param identifiant_ssp: The identifiant_ssp of this ExBasolDto.  # noqa: E501
        :type: str
        """

        self._identifiant_ssp = identifiant_ssp

    @property
    def adresse_lieudit(self):
        """Gets the adresse_lieudit of this ExBasolDto.  # noqa: E501

        Lieu-dit du ex-BASOL  # noqa: E501

        :return: The adresse_lieudit of this ExBasolDto.  # noqa: E501
        :rtype: str
        """
        return self._adresse_lieudit

    @adresse_lieudit.setter
    def adresse_lieudit(self, adresse_lieudit):
        """Sets the adresse_lieudit of this ExBasolDto.

        Lieu-dit du ex-BASOL  # noqa: E501

        :param adresse_lieudit: The adresse_lieudit of this ExBasolDto.  # noqa: E501
        :type: str
        """

        self._adresse_lieudit = adresse_lieudit

    @property
    def code_insee(self):
        """Gets the code_insee of this ExBasolDto.  # noqa: E501

        Code Insee de la commune  # noqa: E501

        :return: The code_insee of this ExBasolDto.  # noqa: E501
        :rtype: str
        """
        return self._code_insee

    @code_insee.setter
    def code_insee(self, code_insee):
        """Sets the code_insee of this ExBasolDto.

        Code Insee de la commune  # noqa: E501

        :param code_insee: The code_insee of this ExBasolDto.  # noqa: E501
        :type: str
        """

        self._code_insee = code_insee

    @property
    def nom_etablissement(self):
        """Gets the nom_etablissement of this ExBasolDto.  # noqa: E501

        Nom de l'établissement  # noqa: E501

        :return: The nom_etablissement of this ExBasolDto.  # noqa: E501
        :rtype: str
        """
        return self._nom_etablissement

    @nom_etablissement.setter
    def nom_etablissement(self, nom_etablissement):
        """Sets the nom_etablissement of this ExBasolDto.

        Nom de l'établissement  # noqa: E501

        :param nom_etablissement: The nom_etablissement of this ExBasolDto.  # noqa: E501
        :type: str
        """

        self._nom_etablissement = nom_etablissement

    @property
    def nom_commune(self):
        """Gets the nom_commune of this ExBasolDto.  # noqa: E501

        Libellé de la commune  # noqa: E501

        :return: The nom_commune of this ExBasolDto.  # noqa: E501
        :rtype: str
        """
        return self._nom_commune

    @nom_commune.setter
    def nom_commune(self, nom_commune):
        """Sets the nom_commune of this ExBasolDto.

        Libellé de la commune  # noqa: E501

        :param nom_commune: The nom_commune of this ExBasolDto.  # noqa: E501
        :type: str
        """

        self._nom_commune = nom_commune

    @property
    def fiche_risque(self):
        """Gets the fiche_risque of this ExBasolDto.  # noqa: E501

        Lien vers la fiche risque du ex-BASOL  # noqa: E501

        :return: The fiche_risque of this ExBasolDto.  # noqa: E501
        :rtype: str
        """
        return self._fiche_risque

    @fiche_risque.setter
    def fiche_risque(self, fiche_risque):
        """Sets the fiche_risque of this ExBasolDto.

        Lien vers la fiche risque du ex-BASOL  # noqa: E501

        :param fiche_risque: The fiche_risque of this ExBasolDto.  # noqa: E501
        :type: str
        """

        self._fiche_risque = fiche_risque

    @property
    def date_maj(self):
        """Gets the date_maj of this ExBasolDto.  # noqa: E501

        Date de mise à jour des données de l'instruction  # noqa: E501

        :return: The date_maj of this ExBasolDto.  # noqa: E501
        :rtype: str
        """
        return self._date_maj

    @date_maj.setter
    def date_maj(self, date_maj):
        """Sets the date_maj of this ExBasolDto.

        Date de mise à jour des données de l'instruction  # noqa: E501

        :param date_maj: The date_maj of this ExBasolDto.  # noqa: E501
        :type: str
        """

        self._date_maj = date_maj

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExBasolDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExBasolDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
