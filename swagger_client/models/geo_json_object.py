# coding: utf-8

"""
    Services API Géorisques

    Description de l'API de Géorisques  # noqa: E501

    OpenAPI spec version: 1.9.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GeoJsonObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crs': 'Crs',
        'bbox': 'list[float]',
        'type': 'str'
    }

    attribute_map = {
        'crs': 'crs',
        'bbox': 'bbox',
        'type': 'type'
    }

    discriminator_value_class_map = {
          'MultiPoint': 'MultiPoint',
'MultiLineString': 'MultiLineString',
'Feature': 'Feature',
'GeometryCollection': 'GeometryCollection',
'Polygon': 'Polygon',
'MultiPolygon': 'MultiPolygon',
'Point': 'Point',
'FeatureCollection': 'FeatureCollection',
'LineString': 'LineString'    }

    def __init__(self, crs=None, bbox=None, type=None):  # noqa: E501
        """GeoJsonObject - a model defined in Swagger"""  # noqa: E501
        self._crs = None
        self._bbox = None
        self._type = None
        self.discriminator = 'type'
        if crs is not None:
            self.crs = crs
        if bbox is not None:
            self.bbox = bbox
        self.type = type

    @property
    def crs(self):
        """Gets the crs of this GeoJsonObject.  # noqa: E501


        :return: The crs of this GeoJsonObject.  # noqa: E501
        :rtype: Crs
        """
        return self._crs

    @crs.setter
    def crs(self, crs):
        """Sets the crs of this GeoJsonObject.


        :param crs: The crs of this GeoJsonObject.  # noqa: E501
        :type: Crs
        """

        self._crs = crs

    @property
    def bbox(self):
        """Gets the bbox of this GeoJsonObject.  # noqa: E501


        :return: The bbox of this GeoJsonObject.  # noqa: E501
        :rtype: list[float]
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this GeoJsonObject.


        :param bbox: The bbox of this GeoJsonObject.  # noqa: E501
        :type: list[float]
        """

        self._bbox = bbox

    @property
    def type(self):
        """Gets the type of this GeoJsonObject.  # noqa: E501


        :return: The type of this GeoJsonObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GeoJsonObject.


        :param type: The type of this GeoJsonObject.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeoJsonObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeoJsonObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
