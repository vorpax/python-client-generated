# coding: utf-8

"""
    Services API Géorisques

    Description de l'API de Géorisques  # noqa: E501

    OpenAPI spec version: 1.9.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Mvt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifiant': 'str',
        'type': 'str',
        'region': 'Region',
        'departement': 'Departement',
        'code_insee': 'str',
        'fiabilite': 'str',
        'lieu': 'str',
        'commentaire_lieu': 'str',
        'date_debut': 'str',
        'precision_date': 'str',
        'commentaire_mvt': 'str',
        'longitude': 'float',
        'latitude': 'float',
        'precision_lieu': 'str',
        'date_maj': 'str'
    }

    attribute_map = {
        'identifiant': 'identifiant',
        'type': 'type',
        'region': 'region',
        'departement': 'departement',
        'code_insee': 'code_insee',
        'fiabilite': 'fiabilite',
        'lieu': 'lieu',
        'commentaire_lieu': 'commentaire_lieu',
        'date_debut': 'date_debut',
        'precision_date': 'precision_date',
        'commentaire_mvt': 'commentaire_mvt',
        'longitude': 'longitude',
        'latitude': 'latitude',
        'precision_lieu': 'precision_lieu',
        'date_maj': 'date_maj'
    }

    def __init__(self, identifiant=None, type=None, region=None, departement=None, code_insee=None, fiabilite=None, lieu=None, commentaire_lieu=None, date_debut=None, precision_date=None, commentaire_mvt=None, longitude=None, latitude=None, precision_lieu=None, date_maj=None):  # noqa: E501
        """Mvt - a model defined in Swagger"""  # noqa: E501
        self._identifiant = None
        self._type = None
        self._region = None
        self._departement = None
        self._code_insee = None
        self._fiabilite = None
        self._lieu = None
        self._commentaire_lieu = None
        self._date_debut = None
        self._precision_date = None
        self._commentaire_mvt = None
        self._longitude = None
        self._latitude = None
        self._precision_lieu = None
        self._date_maj = None
        self.discriminator = None
        if identifiant is not None:
            self.identifiant = identifiant
        if type is not None:
            self.type = type
        if region is not None:
            self.region = region
        if departement is not None:
            self.departement = departement
        if code_insee is not None:
            self.code_insee = code_insee
        if fiabilite is not None:
            self.fiabilite = fiabilite
        if lieu is not None:
            self.lieu = lieu
        if commentaire_lieu is not None:
            self.commentaire_lieu = commentaire_lieu
        if date_debut is not None:
            self.date_debut = date_debut
        if precision_date is not None:
            self.precision_date = precision_date
        if commentaire_mvt is not None:
            self.commentaire_mvt = commentaire_mvt
        if longitude is not None:
            self.longitude = longitude
        if latitude is not None:
            self.latitude = latitude
        if precision_lieu is not None:
            self.precision_lieu = precision_lieu
        if date_maj is not None:
            self.date_maj = date_maj

    @property
    def identifiant(self):
        """Gets the identifiant of this Mvt.  # noqa: E501

        Identifiant unique d'un mouvement de terrain  # noqa: E501

        :return: The identifiant of this Mvt.  # noqa: E501
        :rtype: str
        """
        return self._identifiant

    @identifiant.setter
    def identifiant(self, identifiant):
        """Sets the identifiant of this Mvt.

        Identifiant unique d'un mouvement de terrain  # noqa: E501

        :param identifiant: The identifiant of this Mvt.  # noqa: E501
        :type: str
        """

        self._identifiant = identifiant

    @property
    def type(self):
        """Gets the type of this Mvt.  # noqa: E501

        Type de mouvement de terrain  # noqa: E501

        :return: The type of this Mvt.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Mvt.

        Type de mouvement de terrain  # noqa: E501

        :param type: The type of this Mvt.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def region(self):
        """Gets the region of this Mvt.  # noqa: E501


        :return: The region of this Mvt.  # noqa: E501
        :rtype: Region
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Mvt.


        :param region: The region of this Mvt.  # noqa: E501
        :type: Region
        """

        self._region = region

    @property
    def departement(self):
        """Gets the departement of this Mvt.  # noqa: E501


        :return: The departement of this Mvt.  # noqa: E501
        :rtype: Departement
        """
        return self._departement

    @departement.setter
    def departement(self, departement):
        """Sets the departement of this Mvt.


        :param departement: The departement of this Mvt.  # noqa: E501
        :type: Departement
        """

        self._departement = departement

    @property
    def code_insee(self):
        """Gets the code_insee of this Mvt.  # noqa: E501

        Identifiant unique INSEE de la commune  # noqa: E501

        :return: The code_insee of this Mvt.  # noqa: E501
        :rtype: str
        """
        return self._code_insee

    @code_insee.setter
    def code_insee(self, code_insee):
        """Sets the code_insee of this Mvt.

        Identifiant unique INSEE de la commune  # noqa: E501

        :param code_insee: The code_insee of this Mvt.  # noqa: E501
        :type: str
        """

        self._code_insee = code_insee

    @property
    def fiabilite(self):
        """Gets the fiabilite of this Mvt.  # noqa: E501

        Type de fiabilité  # noqa: E501

        :return: The fiabilite of this Mvt.  # noqa: E501
        :rtype: str
        """
        return self._fiabilite

    @fiabilite.setter
    def fiabilite(self, fiabilite):
        """Sets the fiabilite of this Mvt.

        Type de fiabilité  # noqa: E501

        :param fiabilite: The fiabilite of this Mvt.  # noqa: E501
        :type: str
        """

        self._fiabilite = fiabilite

    @property
    def lieu(self):
        """Gets the lieu of this Mvt.  # noqa: E501

        Lieu d'un mouvement de terrain  # noqa: E501

        :return: The lieu of this Mvt.  # noqa: E501
        :rtype: str
        """
        return self._lieu

    @lieu.setter
    def lieu(self, lieu):
        """Sets the lieu of this Mvt.

        Lieu d'un mouvement de terrain  # noqa: E501

        :param lieu: The lieu of this Mvt.  # noqa: E501
        :type: str
        """

        self._lieu = lieu

    @property
    def commentaire_lieu(self):
        """Gets the commentaire_lieu of this Mvt.  # noqa: E501

        Commentaire su le lieu d'un mouvement de terrain  # noqa: E501

        :return: The commentaire_lieu of this Mvt.  # noqa: E501
        :rtype: str
        """
        return self._commentaire_lieu

    @commentaire_lieu.setter
    def commentaire_lieu(self, commentaire_lieu):
        """Sets the commentaire_lieu of this Mvt.

        Commentaire su le lieu d'un mouvement de terrain  # noqa: E501

        :param commentaire_lieu: The commentaire_lieu of this Mvt.  # noqa: E501
        :type: str
        """

        self._commentaire_lieu = commentaire_lieu

    @property
    def date_debut(self):
        """Gets the date_debut of this Mvt.  # noqa: E501

        Date de début d'un mouvement de terrain  # noqa: E501

        :return: The date_debut of this Mvt.  # noqa: E501
        :rtype: str
        """
        return self._date_debut

    @date_debut.setter
    def date_debut(self, date_debut):
        """Sets the date_debut of this Mvt.

        Date de début d'un mouvement de terrain  # noqa: E501

        :param date_debut: The date_debut of this Mvt.  # noqa: E501
        :type: str
        """

        self._date_debut = date_debut

    @property
    def precision_date(self):
        """Gets the precision_date of this Mvt.  # noqa: E501

        Précision de la date d'un mouvement de terrain  # noqa: E501

        :return: The precision_date of this Mvt.  # noqa: E501
        :rtype: str
        """
        return self._precision_date

    @precision_date.setter
    def precision_date(self, precision_date):
        """Sets the precision_date of this Mvt.

        Précision de la date d'un mouvement de terrain  # noqa: E501

        :param precision_date: The precision_date of this Mvt.  # noqa: E501
        :type: str
        """

        self._precision_date = precision_date

    @property
    def commentaire_mvt(self):
        """Gets the commentaire_mvt of this Mvt.  # noqa: E501

        Commentaire d'un mouvement de terrain  # noqa: E501

        :return: The commentaire_mvt of this Mvt.  # noqa: E501
        :rtype: str
        """
        return self._commentaire_mvt

    @commentaire_mvt.setter
    def commentaire_mvt(self, commentaire_mvt):
        """Sets the commentaire_mvt of this Mvt.

        Commentaire d'un mouvement de terrain  # noqa: E501

        :param commentaire_mvt: The commentaire_mvt of this Mvt.  # noqa: E501
        :type: str
        """

        self._commentaire_mvt = commentaire_mvt

    @property
    def longitude(self):
        """Gets the longitude of this Mvt.  # noqa: E501

        Longitude de la commune  # noqa: E501

        :return: The longitude of this Mvt.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Mvt.

        Longitude de la commune  # noqa: E501

        :param longitude: The longitude of this Mvt.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def latitude(self):
        """Gets the latitude of this Mvt.  # noqa: E501

        Latitude de la commune  # noqa: E501

        :return: The latitude of this Mvt.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Mvt.

        Latitude de la commune  # noqa: E501

        :param latitude: The latitude of this Mvt.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def precision_lieu(self):
        """Gets the precision_lieu of this Mvt.  # noqa: E501

        Précision du lieu d'un mouvement de terrain  # noqa: E501

        :return: The precision_lieu of this Mvt.  # noqa: E501
        :rtype: str
        """
        return self._precision_lieu

    @precision_lieu.setter
    def precision_lieu(self, precision_lieu):
        """Sets the precision_lieu of this Mvt.

        Précision du lieu d'un mouvement de terrain  # noqa: E501

        :param precision_lieu: The precision_lieu of this Mvt.  # noqa: E501
        :type: str
        """

        self._precision_lieu = precision_lieu

    @property
    def date_maj(self):
        """Gets the date_maj of this Mvt.  # noqa: E501

        Date de mise à jour d'un mouvement de terrain  # noqa: E501

        :return: The date_maj of this Mvt.  # noqa: E501
        :rtype: str
        """
        return self._date_maj

    @date_maj.setter
    def date_maj(self, date_maj):
        """Sets the date_maj of this Mvt.

        Date de mise à jour d'un mouvement de terrain  # noqa: E501

        :param date_maj: The date_maj of this Mvt.  # noqa: E501
        :type: str
        """

        self._date_maj = date_maj

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Mvt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Mvt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
