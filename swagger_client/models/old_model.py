# coding: utf-8

"""
    Services API Géorisques

    Description de l'API de Géorisques  # noqa: E501

    OpenAPI spec version: 1.9.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OldModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'commune': 'CommuneModel',
        'coordonnees': 'Coordonnees',
        'risque': 'Risques'
    }

    attribute_map = {
        'commune': 'commune',
        'coordonnees': 'coordonnees',
        'risque': 'risque'
    }

    def __init__(self, commune=None, coordonnees=None, risque=None):  # noqa: E501
        """OldModel - a model defined in Swagger"""  # noqa: E501
        self._commune = None
        self._coordonnees = None
        self._risque = None
        self.discriminator = None
        if commune is not None:
            self.commune = commune
        if coordonnees is not None:
            self.coordonnees = coordonnees
        if risque is not None:
            self.risque = risque

    @property
    def commune(self):
        """Gets the commune of this OldModel.  # noqa: E501


        :return: The commune of this OldModel.  # noqa: E501
        :rtype: CommuneModel
        """
        return self._commune

    @commune.setter
    def commune(self, commune):
        """Sets the commune of this OldModel.


        :param commune: The commune of this OldModel.  # noqa: E501
        :type: CommuneModel
        """

        self._commune = commune

    @property
    def coordonnees(self):
        """Gets the coordonnees of this OldModel.  # noqa: E501


        :return: The coordonnees of this OldModel.  # noqa: E501
        :rtype: Coordonnees
        """
        return self._coordonnees

    @coordonnees.setter
    def coordonnees(self, coordonnees):
        """Sets the coordonnees of this OldModel.


        :param coordonnees: The coordonnees of this OldModel.  # noqa: E501
        :type: Coordonnees
        """

        self._coordonnees = coordonnees

    @property
    def risque(self):
        """Gets the risque of this OldModel.  # noqa: E501


        :return: The risque of this OldModel.  # noqa: E501
        :rtype: Risques
        """
        return self._risque

    @risque.setter
    def risque(self, risque):
        """Sets the risque of this OldModel.


        :param risque: The risque of this OldModel.  # noqa: E501
        :type: Risques
        """

        self._risque = risque

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OldModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OldModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
