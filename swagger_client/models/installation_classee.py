# coding: utf-8

"""
    Services API Géorisques

    Description de l'API de Géorisques  # noqa: E501

    OpenAPI spec version: 1.9.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InstallationClassee(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'raison_sociale': 'str',
        'adresse1': 'str',
        'adresse2': 'str',
        'adresse3': 'str',
        'code_postal': 'str',
        'code_insee': 'str',
        'commune': 'str',
        'code_naf': 'str',
        'longitude': 'float',
        'latitude': 'float',
        'bovins': 'bool',
        'porcs': 'bool',
        'volailles': 'bool',
        'carriere': 'bool',
        'eolienne': 'bool',
        'industrie': 'bool',
        'priorite_nationale': 'bool',
        'statut_seveso': 'str',
        'ied': 'bool',
        'etat_activite': 'str',
        'code_aiot': 'str',
        'siret': 'str',
        'coordonnee_xaiot': 'int',
        'coordonnee_yaiot': 'int',
        'systeme_coordonnees_aiot': 'str',
        'service_aiot': 'str',
        'regime': 'str',
        'rubriques': 'list[RubriqueIC]',
        'inspections': 'list[Inspection]',
        'documents_hors_inspection': 'list[MetadataFichier]',
        'date_maj': 'datetime'
    }

    attribute_map = {
        'raison_sociale': 'raisonSociale',
        'adresse1': 'adresse1',
        'adresse2': 'adresse2',
        'adresse3': 'adresse3',
        'code_postal': 'codePostal',
        'code_insee': 'codeInsee',
        'commune': 'commune',
        'code_naf': 'codeNaf',
        'longitude': 'longitude',
        'latitude': 'latitude',
        'bovins': 'bovins',
        'porcs': 'porcs',
        'volailles': 'volailles',
        'carriere': 'carriere',
        'eolienne': 'eolienne',
        'industrie': 'industrie',
        'priorite_nationale': 'prioriteNationale',
        'statut_seveso': 'statutSeveso',
        'ied': 'ied',
        'etat_activite': 'etatActivite',
        'code_aiot': 'codeAIOT',
        'siret': 'siret',
        'coordonnee_xaiot': 'coordonneeXAIOT',
        'coordonnee_yaiot': 'coordonneeYAIOT',
        'systeme_coordonnees_aiot': 'systemeCoordonneesAIOT',
        'service_aiot': 'serviceAIOT',
        'regime': 'regime',
        'rubriques': 'rubriques',
        'inspections': 'inspections',
        'documents_hors_inspection': 'documentsHorsInspection',
        'date_maj': 'date_maj'
    }

    def __init__(self, raison_sociale=None, adresse1=None, adresse2=None, adresse3=None, code_postal=None, code_insee=None, commune=None, code_naf=None, longitude=None, latitude=None, bovins=None, porcs=None, volailles=None, carriere=None, eolienne=None, industrie=None, priorite_nationale=None, statut_seveso=None, ied=None, etat_activite=None, code_aiot=None, siret=None, coordonnee_xaiot=None, coordonnee_yaiot=None, systeme_coordonnees_aiot=None, service_aiot=None, regime=None, rubriques=None, inspections=None, documents_hors_inspection=None, date_maj=None):  # noqa: E501
        """InstallationClassee - a model defined in Swagger"""  # noqa: E501
        self._raison_sociale = None
        self._adresse1 = None
        self._adresse2 = None
        self._adresse3 = None
        self._code_postal = None
        self._code_insee = None
        self._commune = None
        self._code_naf = None
        self._longitude = None
        self._latitude = None
        self._bovins = None
        self._porcs = None
        self._volailles = None
        self._carriere = None
        self._eolienne = None
        self._industrie = None
        self._priorite_nationale = None
        self._statut_seveso = None
        self._ied = None
        self._etat_activite = None
        self._code_aiot = None
        self._siret = None
        self._coordonnee_xaiot = None
        self._coordonnee_yaiot = None
        self._systeme_coordonnees_aiot = None
        self._service_aiot = None
        self._regime = None
        self._rubriques = None
        self._inspections = None
        self._documents_hors_inspection = None
        self._date_maj = None
        self.discriminator = None
        if raison_sociale is not None:
            self.raison_sociale = raison_sociale
        if adresse1 is not None:
            self.adresse1 = adresse1
        if adresse2 is not None:
            self.adresse2 = adresse2
        if adresse3 is not None:
            self.adresse3 = adresse3
        if code_postal is not None:
            self.code_postal = code_postal
        if code_insee is not None:
            self.code_insee = code_insee
        if commune is not None:
            self.commune = commune
        if code_naf is not None:
            self.code_naf = code_naf
        if longitude is not None:
            self.longitude = longitude
        if latitude is not None:
            self.latitude = latitude
        if bovins is not None:
            self.bovins = bovins
        if porcs is not None:
            self.porcs = porcs
        if volailles is not None:
            self.volailles = volailles
        if carriere is not None:
            self.carriere = carriere
        if eolienne is not None:
            self.eolienne = eolienne
        if industrie is not None:
            self.industrie = industrie
        if priorite_nationale is not None:
            self.priorite_nationale = priorite_nationale
        if statut_seveso is not None:
            self.statut_seveso = statut_seveso
        if ied is not None:
            self.ied = ied
        if etat_activite is not None:
            self.etat_activite = etat_activite
        if code_aiot is not None:
            self.code_aiot = code_aiot
        if siret is not None:
            self.siret = siret
        if coordonnee_xaiot is not None:
            self.coordonnee_xaiot = coordonnee_xaiot
        if coordonnee_yaiot is not None:
            self.coordonnee_yaiot = coordonnee_yaiot
        if systeme_coordonnees_aiot is not None:
            self.systeme_coordonnees_aiot = systeme_coordonnees_aiot
        if service_aiot is not None:
            self.service_aiot = service_aiot
        if regime is not None:
            self.regime = regime
        if rubriques is not None:
            self.rubriques = rubriques
        if inspections is not None:
            self.inspections = inspections
        if documents_hors_inspection is not None:
            self.documents_hors_inspection = documents_hors_inspection
        if date_maj is not None:
            self.date_maj = date_maj

    @property
    def raison_sociale(self):
        """Gets the raison_sociale of this InstallationClassee.  # noqa: E501

        Raison sociale de l'installation classee si personne morale ou nom et prenom si personne physique  # noqa: E501

        :return: The raison_sociale of this InstallationClassee.  # noqa: E501
        :rtype: str
        """
        return self._raison_sociale

    @raison_sociale.setter
    def raison_sociale(self, raison_sociale):
        """Sets the raison_sociale of this InstallationClassee.

        Raison sociale de l'installation classee si personne morale ou nom et prenom si personne physique  # noqa: E501

        :param raison_sociale: The raison_sociale of this InstallationClassee.  # noqa: E501
        :type: str
        """

        self._raison_sociale = raison_sociale

    @property
    def adresse1(self):
        """Gets the adresse1 of this InstallationClassee.  # noqa: E501

        Adresse - Ligne 1  # noqa: E501

        :return: The adresse1 of this InstallationClassee.  # noqa: E501
        :rtype: str
        """
        return self._adresse1

    @adresse1.setter
    def adresse1(self, adresse1):
        """Sets the adresse1 of this InstallationClassee.

        Adresse - Ligne 1  # noqa: E501

        :param adresse1: The adresse1 of this InstallationClassee.  # noqa: E501
        :type: str
        """

        self._adresse1 = adresse1

    @property
    def adresse2(self):
        """Gets the adresse2 of this InstallationClassee.  # noqa: E501

        Adresse - Ligne 2  # noqa: E501

        :return: The adresse2 of this InstallationClassee.  # noqa: E501
        :rtype: str
        """
        return self._adresse2

    @adresse2.setter
    def adresse2(self, adresse2):
        """Sets the adresse2 of this InstallationClassee.

        Adresse - Ligne 2  # noqa: E501

        :param adresse2: The adresse2 of this InstallationClassee.  # noqa: E501
        :type: str
        """

        self._adresse2 = adresse2

    @property
    def adresse3(self):
        """Gets the adresse3 of this InstallationClassee.  # noqa: E501

        Adresse - Ligne 3  # noqa: E501

        :return: The adresse3 of this InstallationClassee.  # noqa: E501
        :rtype: str
        """
        return self._adresse3

    @adresse3.setter
    def adresse3(self, adresse3):
        """Sets the adresse3 of this InstallationClassee.

        Adresse - Ligne 3  # noqa: E501

        :param adresse3: The adresse3 of this InstallationClassee.  # noqa: E501
        :type: str
        """

        self._adresse3 = adresse3

    @property
    def code_postal(self):
        """Gets the code_postal of this InstallationClassee.  # noqa: E501

        Code postal de l'installation classee  # noqa: E501

        :return: The code_postal of this InstallationClassee.  # noqa: E501
        :rtype: str
        """
        return self._code_postal

    @code_postal.setter
    def code_postal(self, code_postal):
        """Sets the code_postal of this InstallationClassee.

        Code postal de l'installation classee  # noqa: E501

        :param code_postal: The code_postal of this InstallationClassee.  # noqa: E501
        :type: str
        """

        self._code_postal = code_postal

    @property
    def code_insee(self):
        """Gets the code_insee of this InstallationClassee.  # noqa: E501

        Code INSEE de l'installation classee  # noqa: E501

        :return: The code_insee of this InstallationClassee.  # noqa: E501
        :rtype: str
        """
        return self._code_insee

    @code_insee.setter
    def code_insee(self, code_insee):
        """Sets the code_insee of this InstallationClassee.

        Code INSEE de l'installation classee  # noqa: E501

        :param code_insee: The code_insee of this InstallationClassee.  # noqa: E501
        :type: str
        """

        self._code_insee = code_insee

    @property
    def commune(self):
        """Gets the commune of this InstallationClassee.  # noqa: E501

        Commune de l'installation classee  # noqa: E501

        :return: The commune of this InstallationClassee.  # noqa: E501
        :rtype: str
        """
        return self._commune

    @commune.setter
    def commune(self, commune):
        """Sets the commune of this InstallationClassee.

        Commune de l'installation classee  # noqa: E501

        :param commune: The commune of this InstallationClassee.  # noqa: E501
        :type: str
        """

        self._commune = commune

    @property
    def code_naf(self):
        """Gets the code_naf of this InstallationClassee.  # noqa: E501

        Deux premiers caracteres du code NAF de l'installation classee  # noqa: E501

        :return: The code_naf of this InstallationClassee.  # noqa: E501
        :rtype: str
        """
        return self._code_naf

    @code_naf.setter
    def code_naf(self, code_naf):
        """Sets the code_naf of this InstallationClassee.

        Deux premiers caracteres du code NAF de l'installation classee  # noqa: E501

        :param code_naf: The code_naf of this InstallationClassee.  # noqa: E501
        :type: str
        """

        self._code_naf = code_naf

    @property
    def longitude(self):
        """Gets the longitude of this InstallationClassee.  # noqa: E501

        Valeur de la coordonnee longitude  # noqa: E501

        :return: The longitude of this InstallationClassee.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this InstallationClassee.

        Valeur de la coordonnee longitude  # noqa: E501

        :param longitude: The longitude of this InstallationClassee.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def latitude(self):
        """Gets the latitude of this InstallationClassee.  # noqa: E501

        Valeur de la coordonnee latitude  # noqa: E501

        :return: The latitude of this InstallationClassee.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this InstallationClassee.

        Valeur de la coordonnee latitude  # noqa: E501

        :param latitude: The latitude of this InstallationClassee.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def bovins(self):
        """Gets the bovins of this InstallationClassee.  # noqa: E501

        Famille ou sous famille de la nomenclature installation classee  # noqa: E501

        :return: The bovins of this InstallationClassee.  # noqa: E501
        :rtype: bool
        """
        return self._bovins

    @bovins.setter
    def bovins(self, bovins):
        """Sets the bovins of this InstallationClassee.

        Famille ou sous famille de la nomenclature installation classee  # noqa: E501

        :param bovins: The bovins of this InstallationClassee.  # noqa: E501
        :type: bool
        """

        self._bovins = bovins

    @property
    def porcs(self):
        """Gets the porcs of this InstallationClassee.  # noqa: E501

        Famille ou sous famille de la nomenclature installation classee  # noqa: E501

        :return: The porcs of this InstallationClassee.  # noqa: E501
        :rtype: bool
        """
        return self._porcs

    @porcs.setter
    def porcs(self, porcs):
        """Sets the porcs of this InstallationClassee.

        Famille ou sous famille de la nomenclature installation classee  # noqa: E501

        :param porcs: The porcs of this InstallationClassee.  # noqa: E501
        :type: bool
        """

        self._porcs = porcs

    @property
    def volailles(self):
        """Gets the volailles of this InstallationClassee.  # noqa: E501

        Famille ou sous famille de la nomenclature installation classee  # noqa: E501

        :return: The volailles of this InstallationClassee.  # noqa: E501
        :rtype: bool
        """
        return self._volailles

    @volailles.setter
    def volailles(self, volailles):
        """Sets the volailles of this InstallationClassee.

        Famille ou sous famille de la nomenclature installation classee  # noqa: E501

        :param volailles: The volailles of this InstallationClassee.  # noqa: E501
        :type: bool
        """

        self._volailles = volailles

    @property
    def carriere(self):
        """Gets the carriere of this InstallationClassee.  # noqa: E501

        Famille ou sous famille de la nomenclature installation classee  # noqa: E501

        :return: The carriere of this InstallationClassee.  # noqa: E501
        :rtype: bool
        """
        return self._carriere

    @carriere.setter
    def carriere(self, carriere):
        """Sets the carriere of this InstallationClassee.

        Famille ou sous famille de la nomenclature installation classee  # noqa: E501

        :param carriere: The carriere of this InstallationClassee.  # noqa: E501
        :type: bool
        """

        self._carriere = carriere

    @property
    def eolienne(self):
        """Gets the eolienne of this InstallationClassee.  # noqa: E501

        Famille ou sous famille de la nomenclature installation classee  # noqa: E501

        :return: The eolienne of this InstallationClassee.  # noqa: E501
        :rtype: bool
        """
        return self._eolienne

    @eolienne.setter
    def eolienne(self, eolienne):
        """Sets the eolienne of this InstallationClassee.

        Famille ou sous famille de la nomenclature installation classee  # noqa: E501

        :param eolienne: The eolienne of this InstallationClassee.  # noqa: E501
        :type: bool
        """

        self._eolienne = eolienne

    @property
    def industrie(self):
        """Gets the industrie of this InstallationClassee.  # noqa: E501

        Famille ou sous famille de la nomenclature installation classee  # noqa: E501

        :return: The industrie of this InstallationClassee.  # noqa: E501
        :rtype: bool
        """
        return self._industrie

    @industrie.setter
    def industrie(self, industrie):
        """Sets the industrie of this InstallationClassee.

        Famille ou sous famille de la nomenclature installation classee  # noqa: E501

        :param industrie: The industrie of this InstallationClassee.  # noqa: E501
        :type: bool
        """

        self._industrie = industrie

    @property
    def priorite_nationale(self):
        """Gets the priorite_nationale of this InstallationClassee.  # noqa: E501

        Indicateur de priorite nationale  # noqa: E501

        :return: The priorite_nationale of this InstallationClassee.  # noqa: E501
        :rtype: bool
        """
        return self._priorite_nationale

    @priorite_nationale.setter
    def priorite_nationale(self, priorite_nationale):
        """Sets the priorite_nationale of this InstallationClassee.

        Indicateur de priorite nationale  # noqa: E501

        :param priorite_nationale: The priorite_nationale of this InstallationClassee.  # noqa: E501
        :type: bool
        """

        self._priorite_nationale = priorite_nationale

    @property
    def statut_seveso(self):
        """Gets the statut_seveso of this InstallationClassee.  # noqa: E501

        Presence du champ statut SEVESO  # noqa: E501

        :return: The statut_seveso of this InstallationClassee.  # noqa: E501
        :rtype: str
        """
        return self._statut_seveso

    @statut_seveso.setter
    def statut_seveso(self, statut_seveso):
        """Sets the statut_seveso of this InstallationClassee.

        Presence du champ statut SEVESO  # noqa: E501

        :param statut_seveso: The statut_seveso of this InstallationClassee.  # noqa: E501
        :type: str
        """

        self._statut_seveso = statut_seveso

    @property
    def ied(self):
        """Gets the ied of this InstallationClassee.  # noqa: E501

        Indicateur IED  # noqa: E501

        :return: The ied of this InstallationClassee.  # noqa: E501
        :rtype: bool
        """
        return self._ied

    @ied.setter
    def ied(self, ied):
        """Sets the ied of this InstallationClassee.

        Indicateur IED  # noqa: E501

        :param ied: The ied of this InstallationClassee.  # noqa: E501
        :type: bool
        """

        self._ied = ied

    @property
    def etat_activite(self):
        """Gets the etat_activite of this InstallationClassee.  # noqa: E501

        Etat de l'activite de l'installation classee  # noqa: E501

        :return: The etat_activite of this InstallationClassee.  # noqa: E501
        :rtype: str
        """
        return self._etat_activite

    @etat_activite.setter
    def etat_activite(self, etat_activite):
        """Sets the etat_activite of this InstallationClassee.

        Etat de l'activite de l'installation classee  # noqa: E501

        :param etat_activite: The etat_activite of this InstallationClassee.  # noqa: E501
        :type: str
        """

        self._etat_activite = etat_activite

    @property
    def code_aiot(self):
        """Gets the code_aiot of this InstallationClassee.  # noqa: E501

        Code unique GUNenv, clef metier  # noqa: E501

        :return: The code_aiot of this InstallationClassee.  # noqa: E501
        :rtype: str
        """
        return self._code_aiot

    @code_aiot.setter
    def code_aiot(self, code_aiot):
        """Sets the code_aiot of this InstallationClassee.

        Code unique GUNenv, clef metier  # noqa: E501

        :param code_aiot: The code_aiot of this InstallationClassee.  # noqa: E501
        :type: str
        """

        self._code_aiot = code_aiot

    @property
    def siret(self):
        """Gets the siret of this InstallationClassee.  # noqa: E501

        Systeme d'identification du repertoire des installations classees sur 14 chiffres  # noqa: E501

        :return: The siret of this InstallationClassee.  # noqa: E501
        :rtype: str
        """
        return self._siret

    @siret.setter
    def siret(self, siret):
        """Sets the siret of this InstallationClassee.

        Systeme d'identification du repertoire des installations classees sur 14 chiffres  # noqa: E501

        :param siret: The siret of this InstallationClassee.  # noqa: E501
        :type: str
        """

        self._siret = siret

    @property
    def coordonnee_xaiot(self):
        """Gets the coordonnee_xaiot of this InstallationClassee.  # noqa: E501

        Valeur de la coordonnee X  # noqa: E501

        :return: The coordonnee_xaiot of this InstallationClassee.  # noqa: E501
        :rtype: int
        """
        return self._coordonnee_xaiot

    @coordonnee_xaiot.setter
    def coordonnee_xaiot(self, coordonnee_xaiot):
        """Sets the coordonnee_xaiot of this InstallationClassee.

        Valeur de la coordonnee X  # noqa: E501

        :param coordonnee_xaiot: The coordonnee_xaiot of this InstallationClassee.  # noqa: E501
        :type: int
        """

        self._coordonnee_xaiot = coordonnee_xaiot

    @property
    def coordonnee_yaiot(self):
        """Gets the coordonnee_yaiot of this InstallationClassee.  # noqa: E501

        Valeur de la coordonnee Y  # noqa: E501

        :return: The coordonnee_yaiot of this InstallationClassee.  # noqa: E501
        :rtype: int
        """
        return self._coordonnee_yaiot

    @coordonnee_yaiot.setter
    def coordonnee_yaiot(self, coordonnee_yaiot):
        """Sets the coordonnee_yaiot of this InstallationClassee.

        Valeur de la coordonnee Y  # noqa: E501

        :param coordonnee_yaiot: The coordonnee_yaiot of this InstallationClassee.  # noqa: E501
        :type: int
        """

        self._coordonnee_yaiot = coordonnee_yaiot

    @property
    def systeme_coordonnees_aiot(self):
        """Gets the systeme_coordonnees_aiot of this InstallationClassee.  # noqa: E501

        Systeme de coordonnees geographiques (projection) de l'installation classee  # noqa: E501

        :return: The systeme_coordonnees_aiot of this InstallationClassee.  # noqa: E501
        :rtype: str
        """
        return self._systeme_coordonnees_aiot

    @systeme_coordonnees_aiot.setter
    def systeme_coordonnees_aiot(self, systeme_coordonnees_aiot):
        """Sets the systeme_coordonnees_aiot of this InstallationClassee.

        Systeme de coordonnees geographiques (projection) de l'installation classee  # noqa: E501

        :param systeme_coordonnees_aiot: The systeme_coordonnees_aiot of this InstallationClassee.  # noqa: E501
        :type: str
        """

        self._systeme_coordonnees_aiot = systeme_coordonnees_aiot

    @property
    def service_aiot(self):
        """Gets the service_aiot of this InstallationClassee.  # noqa: E501

        Libelle court du service d'inspection  # noqa: E501

        :return: The service_aiot of this InstallationClassee.  # noqa: E501
        :rtype: str
        """
        return self._service_aiot

    @service_aiot.setter
    def service_aiot(self, service_aiot):
        """Sets the service_aiot of this InstallationClassee.

        Libelle court du service d'inspection  # noqa: E501

        :param service_aiot: The service_aiot of this InstallationClassee.  # noqa: E501
        :type: str
        """

        self._service_aiot = service_aiot

    @property
    def regime(self):
        """Gets the regime of this InstallationClassee.  # noqa: E501

        Regime en vigeur de l'installation classee  # noqa: E501

        :return: The regime of this InstallationClassee.  # noqa: E501
        :rtype: str
        """
        return self._regime

    @regime.setter
    def regime(self, regime):
        """Sets the regime of this InstallationClassee.

        Regime en vigeur de l'installation classee  # noqa: E501

        :param regime: The regime of this InstallationClassee.  # noqa: E501
        :type: str
        """

        self._regime = regime

    @property
    def rubriques(self):
        """Gets the rubriques of this InstallationClassee.  # noqa: E501

        Liste des rubriques repondant aux criteres  # noqa: E501

        :return: The rubriques of this InstallationClassee.  # noqa: E501
        :rtype: list[RubriqueIC]
        """
        return self._rubriques

    @rubriques.setter
    def rubriques(self, rubriques):
        """Sets the rubriques of this InstallationClassee.

        Liste des rubriques repondant aux criteres  # noqa: E501

        :param rubriques: The rubriques of this InstallationClassee.  # noqa: E501
        :type: list[RubriqueIC]
        """

        self._rubriques = rubriques

    @property
    def inspections(self):
        """Gets the inspections of this InstallationClassee.  # noqa: E501

        Liste des inspections  # noqa: E501

        :return: The inspections of this InstallationClassee.  # noqa: E501
        :rtype: list[Inspection]
        """
        return self._inspections

    @inspections.setter
    def inspections(self, inspections):
        """Sets the inspections of this InstallationClassee.

        Liste des inspections  # noqa: E501

        :param inspections: The inspections of this InstallationClassee.  # noqa: E501
        :type: list[Inspection]
        """

        self._inspections = inspections

    @property
    def documents_hors_inspection(self):
        """Gets the documents_hors_inspection of this InstallationClassee.  # noqa: E501

        Liste des documents hors inpection publies sur Georisques  # noqa: E501

        :return: The documents_hors_inspection of this InstallationClassee.  # noqa: E501
        :rtype: list[MetadataFichier]
        """
        return self._documents_hors_inspection

    @documents_hors_inspection.setter
    def documents_hors_inspection(self, documents_hors_inspection):
        """Sets the documents_hors_inspection of this InstallationClassee.

        Liste des documents hors inpection publies sur Georisques  # noqa: E501

        :param documents_hors_inspection: The documents_hors_inspection of this InstallationClassee.  # noqa: E501
        :type: list[MetadataFichier]
        """

        self._documents_hors_inspection = documents_hors_inspection

    @property
    def date_maj(self):
        """Gets the date_maj of this InstallationClassee.  # noqa: E501

        Date de dernière mise à jour des données. L'API renvoie toutes les données ayant été mises à jour à partir de date_maj  # noqa: E501

        :return: The date_maj of this InstallationClassee.  # noqa: E501
        :rtype: datetime
        """
        return self._date_maj

    @date_maj.setter
    def date_maj(self, date_maj):
        """Sets the date_maj of this InstallationClassee.

        Date de dernière mise à jour des données. L'API renvoie toutes les données ayant été mises à jour à partir de date_maj  # noqa: E501

        :param date_maj: The date_maj of this InstallationClassee.  # noqa: E501
        :type: datetime
        """

        self._date_maj = date_maj

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstallationClassee, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstallationClassee):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
