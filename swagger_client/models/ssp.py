# coding: utf-8

"""
    Services API Géorisques

    Description de l'API de Géorisques  # noqa: E501

    OpenAPI spec version: 1.9.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Ssp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'casias': 'PaginatedResponseCasiasDto',
        'instructions': 'PaginatedResponseExBasolDto',
        'conclusions_sis': 'PaginatedResponseSisDto',
        'conclusions_sup': 'PaginatedResponseSupDto'
    }

    attribute_map = {
        'casias': 'casias',
        'instructions': 'instructions',
        'conclusions_sis': 'conclusions_sis',
        'conclusions_sup': 'conclusions_sup'
    }

    def __init__(self, casias=None, instructions=None, conclusions_sis=None, conclusions_sup=None):  # noqa: E501
        """Ssp - a model defined in Swagger"""  # noqa: E501
        self._casias = None
        self._instructions = None
        self._conclusions_sis = None
        self._conclusions_sup = None
        self.discriminator = None
        if casias is not None:
            self.casias = casias
        if instructions is not None:
            self.instructions = instructions
        if conclusions_sis is not None:
            self.conclusions_sis = conclusions_sis
        if conclusions_sup is not None:
            self.conclusions_sup = conclusions_sup

    @property
    def casias(self):
        """Gets the casias of this Ssp.  # noqa: E501


        :return: The casias of this Ssp.  # noqa: E501
        :rtype: PaginatedResponseCasiasDto
        """
        return self._casias

    @casias.setter
    def casias(self, casias):
        """Sets the casias of this Ssp.


        :param casias: The casias of this Ssp.  # noqa: E501
        :type: PaginatedResponseCasiasDto
        """

        self._casias = casias

    @property
    def instructions(self):
        """Gets the instructions of this Ssp.  # noqa: E501


        :return: The instructions of this Ssp.  # noqa: E501
        :rtype: PaginatedResponseExBasolDto
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this Ssp.


        :param instructions: The instructions of this Ssp.  # noqa: E501
        :type: PaginatedResponseExBasolDto
        """

        self._instructions = instructions

    @property
    def conclusions_sis(self):
        """Gets the conclusions_sis of this Ssp.  # noqa: E501


        :return: The conclusions_sis of this Ssp.  # noqa: E501
        :rtype: PaginatedResponseSisDto
        """
        return self._conclusions_sis

    @conclusions_sis.setter
    def conclusions_sis(self, conclusions_sis):
        """Sets the conclusions_sis of this Ssp.


        :param conclusions_sis: The conclusions_sis of this Ssp.  # noqa: E501
        :type: PaginatedResponseSisDto
        """

        self._conclusions_sis = conclusions_sis

    @property
    def conclusions_sup(self):
        """Gets the conclusions_sup of this Ssp.  # noqa: E501


        :return: The conclusions_sup of this Ssp.  # noqa: E501
        :rtype: PaginatedResponseSupDto
        """
        return self._conclusions_sup

    @conclusions_sup.setter
    def conclusions_sup(self, conclusions_sup):
        """Sets the conclusions_sup of this Ssp.


        :param conclusions_sup: The conclusions_sup of this Ssp.  # noqa: E501
        :type: PaginatedResponseSupDto
        """

        self._conclusions_sup = conclusions_sup

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Ssp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ssp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
