# coding: utf-8

"""
    Services API Géorisques

    Description de l'API de Géorisques  # noqa: E501

    OpenAPI spec version: 1.9.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Inspection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_inspection': 'datetime',
        'fichier_inspection': 'MetadataFichier'
    }

    attribute_map = {
        'date_inspection': 'dateInspection',
        'fichier_inspection': 'fichierInspection'
    }

    def __init__(self, date_inspection=None, fichier_inspection=None):  # noqa: E501
        """Inspection - a model defined in Swagger"""  # noqa: E501
        self._date_inspection = None
        self._fichier_inspection = None
        self.discriminator = None
        if date_inspection is not None:
            self.date_inspection = date_inspection
        if fichier_inspection is not None:
            self.fichier_inspection = fichier_inspection

    @property
    def date_inspection(self):
        """Gets the date_inspection of this Inspection.  # noqa: E501

        Date de l'inspection pour l'installation classee en question  # noqa: E501

        :return: The date_inspection of this Inspection.  # noqa: E501
        :rtype: datetime
        """
        return self._date_inspection

    @date_inspection.setter
    def date_inspection(self, date_inspection):
        """Sets the date_inspection of this Inspection.

        Date de l'inspection pour l'installation classee en question  # noqa: E501

        :param date_inspection: The date_inspection of this Inspection.  # noqa: E501
        :type: datetime
        """

        self._date_inspection = date_inspection

    @property
    def fichier_inspection(self):
        """Gets the fichier_inspection of this Inspection.  # noqa: E501


        :return: The fichier_inspection of this Inspection.  # noqa: E501
        :rtype: MetadataFichier
        """
        return self._fichier_inspection

    @fichier_inspection.setter
    def fichier_inspection(self, fichier_inspection):
        """Sets the fichier_inspection of this Inspection.


        :param fichier_inspection: The fichier_inspection of this Inspection.  # noqa: E501
        :type: MetadataFichier
        """

        self._fichier_inspection = fichier_inspection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Inspection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Inspection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
