# coding: utf-8

"""
    Services API Géorisques

    Description de l'API de Géorisques  # noqa: E501

    OpenAPI spec version: 1.9.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RapportRisquesJsonDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'adresse': 'AdresseDto',
        'commune': 'CommuneDto',
        'url': 'str',
        'risques_naturels': 'RisquesNaturelsDto',
        'risques_technologiques': 'RisquesTechnologiquesDto'
    }

    attribute_map = {
        'adresse': 'adresse',
        'commune': 'commune',
        'url': 'url',
        'risques_naturels': 'risquesNaturels',
        'risques_technologiques': 'risquesTechnologiques'
    }

    def __init__(self, adresse=None, commune=None, url=None, risques_naturels=None, risques_technologiques=None):  # noqa: E501
        """RapportRisquesJsonDto - a model defined in Swagger"""  # noqa: E501
        self._adresse = None
        self._commune = None
        self._url = None
        self._risques_naturels = None
        self._risques_technologiques = None
        self.discriminator = None
        if adresse is not None:
            self.adresse = adresse
        if commune is not None:
            self.commune = commune
        if url is not None:
            self.url = url
        if risques_naturels is not None:
            self.risques_naturels = risques_naturels
        if risques_technologiques is not None:
            self.risques_technologiques = risques_technologiques

    @property
    def adresse(self):
        """Gets the adresse of this RapportRisquesJsonDto.  # noqa: E501


        :return: The adresse of this RapportRisquesJsonDto.  # noqa: E501
        :rtype: AdresseDto
        """
        return self._adresse

    @adresse.setter
    def adresse(self, adresse):
        """Sets the adresse of this RapportRisquesJsonDto.


        :param adresse: The adresse of this RapportRisquesJsonDto.  # noqa: E501
        :type: AdresseDto
        """

        self._adresse = adresse

    @property
    def commune(self):
        """Gets the commune of this RapportRisquesJsonDto.  # noqa: E501


        :return: The commune of this RapportRisquesJsonDto.  # noqa: E501
        :rtype: CommuneDto
        """
        return self._commune

    @commune.setter
    def commune(self, commune):
        """Sets the commune of this RapportRisquesJsonDto.


        :param commune: The commune of this RapportRisquesJsonDto.  # noqa: E501
        :type: CommuneDto
        """

        self._commune = commune

    @property
    def url(self):
        """Gets the url of this RapportRisquesJsonDto.  # noqa: E501


        :return: The url of this RapportRisquesJsonDto.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RapportRisquesJsonDto.


        :param url: The url of this RapportRisquesJsonDto.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def risques_naturels(self):
        """Gets the risques_naturels of this RapportRisquesJsonDto.  # noqa: E501


        :return: The risques_naturels of this RapportRisquesJsonDto.  # noqa: E501
        :rtype: RisquesNaturelsDto
        """
        return self._risques_naturels

    @risques_naturels.setter
    def risques_naturels(self, risques_naturels):
        """Sets the risques_naturels of this RapportRisquesJsonDto.


        :param risques_naturels: The risques_naturels of this RapportRisquesJsonDto.  # noqa: E501
        :type: RisquesNaturelsDto
        """

        self._risques_naturels = risques_naturels

    @property
    def risques_technologiques(self):
        """Gets the risques_technologiques of this RapportRisquesJsonDto.  # noqa: E501


        :return: The risques_technologiques of this RapportRisquesJsonDto.  # noqa: E501
        :rtype: RisquesTechnologiquesDto
        """
        return self._risques_technologiques

    @risques_technologiques.setter
    def risques_technologiques(self, risques_technologiques):
        """Sets the risques_technologiques of this RapportRisquesJsonDto.


        :param risques_technologiques: The risques_technologiques of this RapportRisquesJsonDto.  # noqa: E501
        :type: RisquesTechnologiquesDto
        """

        self._risques_technologiques = risques_technologiques

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RapportRisquesJsonDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RapportRisquesJsonDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
