# coding: utf-8

"""
    Services API Géorisques

    Description de l'API de Géorisques  # noqa: E501

    OpenAPI spec version: 1.9.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RisquesNaturelsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inondation': 'RisqueDto',
        'risque_cotier': 'RisqueDto',
        'seisme': 'RisqueDto',
        'mouvement_terrain': 'RisqueDto',
        'recul_trait_cote': 'RisqueDto',
        'retrait_gonflement_argile': 'RisqueDto',
        'avalanche': 'RisqueDto',
        'feu_foret': 'RisqueDto',
        'eruption_volcanique': 'RisqueDto',
        'cyclone': 'RisqueDto',
        'radon': 'RisqueDto'
    }

    attribute_map = {
        'inondation': 'inondation',
        'risque_cotier': 'risqueCotier',
        'seisme': 'seisme',
        'mouvement_terrain': 'mouvementTerrain',
        'recul_trait_cote': 'reculTraitCote',
        'retrait_gonflement_argile': 'retraitGonflementArgile',
        'avalanche': 'avalanche',
        'feu_foret': 'feuForet',
        'eruption_volcanique': 'eruptionVolcanique',
        'cyclone': 'cyclone',
        'radon': 'radon'
    }

    def __init__(self, inondation=None, risque_cotier=None, seisme=None, mouvement_terrain=None, recul_trait_cote=None, retrait_gonflement_argile=None, avalanche=None, feu_foret=None, eruption_volcanique=None, cyclone=None, radon=None):  # noqa: E501
        """RisquesNaturelsDto - a model defined in Swagger"""  # noqa: E501
        self._inondation = None
        self._risque_cotier = None
        self._seisme = None
        self._mouvement_terrain = None
        self._recul_trait_cote = None
        self._retrait_gonflement_argile = None
        self._avalanche = None
        self._feu_foret = None
        self._eruption_volcanique = None
        self._cyclone = None
        self._radon = None
        self.discriminator = None
        if inondation is not None:
            self.inondation = inondation
        if risque_cotier is not None:
            self.risque_cotier = risque_cotier
        if seisme is not None:
            self.seisme = seisme
        if mouvement_terrain is not None:
            self.mouvement_terrain = mouvement_terrain
        if recul_trait_cote is not None:
            self.recul_trait_cote = recul_trait_cote
        if retrait_gonflement_argile is not None:
            self.retrait_gonflement_argile = retrait_gonflement_argile
        if avalanche is not None:
            self.avalanche = avalanche
        if feu_foret is not None:
            self.feu_foret = feu_foret
        if eruption_volcanique is not None:
            self.eruption_volcanique = eruption_volcanique
        if cyclone is not None:
            self.cyclone = cyclone
        if radon is not None:
            self.radon = radon

    @property
    def inondation(self):
        """Gets the inondation of this RisquesNaturelsDto.  # noqa: E501


        :return: The inondation of this RisquesNaturelsDto.  # noqa: E501
        :rtype: RisqueDto
        """
        return self._inondation

    @inondation.setter
    def inondation(self, inondation):
        """Sets the inondation of this RisquesNaturelsDto.


        :param inondation: The inondation of this RisquesNaturelsDto.  # noqa: E501
        :type: RisqueDto
        """

        self._inondation = inondation

    @property
    def risque_cotier(self):
        """Gets the risque_cotier of this RisquesNaturelsDto.  # noqa: E501


        :return: The risque_cotier of this RisquesNaturelsDto.  # noqa: E501
        :rtype: RisqueDto
        """
        return self._risque_cotier

    @risque_cotier.setter
    def risque_cotier(self, risque_cotier):
        """Sets the risque_cotier of this RisquesNaturelsDto.


        :param risque_cotier: The risque_cotier of this RisquesNaturelsDto.  # noqa: E501
        :type: RisqueDto
        """

        self._risque_cotier = risque_cotier

    @property
    def seisme(self):
        """Gets the seisme of this RisquesNaturelsDto.  # noqa: E501


        :return: The seisme of this RisquesNaturelsDto.  # noqa: E501
        :rtype: RisqueDto
        """
        return self._seisme

    @seisme.setter
    def seisme(self, seisme):
        """Sets the seisme of this RisquesNaturelsDto.


        :param seisme: The seisme of this RisquesNaturelsDto.  # noqa: E501
        :type: RisqueDto
        """

        self._seisme = seisme

    @property
    def mouvement_terrain(self):
        """Gets the mouvement_terrain of this RisquesNaturelsDto.  # noqa: E501


        :return: The mouvement_terrain of this RisquesNaturelsDto.  # noqa: E501
        :rtype: RisqueDto
        """
        return self._mouvement_terrain

    @mouvement_terrain.setter
    def mouvement_terrain(self, mouvement_terrain):
        """Sets the mouvement_terrain of this RisquesNaturelsDto.


        :param mouvement_terrain: The mouvement_terrain of this RisquesNaturelsDto.  # noqa: E501
        :type: RisqueDto
        """

        self._mouvement_terrain = mouvement_terrain

    @property
    def recul_trait_cote(self):
        """Gets the recul_trait_cote of this RisquesNaturelsDto.  # noqa: E501


        :return: The recul_trait_cote of this RisquesNaturelsDto.  # noqa: E501
        :rtype: RisqueDto
        """
        return self._recul_trait_cote

    @recul_trait_cote.setter
    def recul_trait_cote(self, recul_trait_cote):
        """Sets the recul_trait_cote of this RisquesNaturelsDto.


        :param recul_trait_cote: The recul_trait_cote of this RisquesNaturelsDto.  # noqa: E501
        :type: RisqueDto
        """

        self._recul_trait_cote = recul_trait_cote

    @property
    def retrait_gonflement_argile(self):
        """Gets the retrait_gonflement_argile of this RisquesNaturelsDto.  # noqa: E501


        :return: The retrait_gonflement_argile of this RisquesNaturelsDto.  # noqa: E501
        :rtype: RisqueDto
        """
        return self._retrait_gonflement_argile

    @retrait_gonflement_argile.setter
    def retrait_gonflement_argile(self, retrait_gonflement_argile):
        """Sets the retrait_gonflement_argile of this RisquesNaturelsDto.


        :param retrait_gonflement_argile: The retrait_gonflement_argile of this RisquesNaturelsDto.  # noqa: E501
        :type: RisqueDto
        """

        self._retrait_gonflement_argile = retrait_gonflement_argile

    @property
    def avalanche(self):
        """Gets the avalanche of this RisquesNaturelsDto.  # noqa: E501


        :return: The avalanche of this RisquesNaturelsDto.  # noqa: E501
        :rtype: RisqueDto
        """
        return self._avalanche

    @avalanche.setter
    def avalanche(self, avalanche):
        """Sets the avalanche of this RisquesNaturelsDto.


        :param avalanche: The avalanche of this RisquesNaturelsDto.  # noqa: E501
        :type: RisqueDto
        """

        self._avalanche = avalanche

    @property
    def feu_foret(self):
        """Gets the feu_foret of this RisquesNaturelsDto.  # noqa: E501


        :return: The feu_foret of this RisquesNaturelsDto.  # noqa: E501
        :rtype: RisqueDto
        """
        return self._feu_foret

    @feu_foret.setter
    def feu_foret(self, feu_foret):
        """Sets the feu_foret of this RisquesNaturelsDto.


        :param feu_foret: The feu_foret of this RisquesNaturelsDto.  # noqa: E501
        :type: RisqueDto
        """

        self._feu_foret = feu_foret

    @property
    def eruption_volcanique(self):
        """Gets the eruption_volcanique of this RisquesNaturelsDto.  # noqa: E501


        :return: The eruption_volcanique of this RisquesNaturelsDto.  # noqa: E501
        :rtype: RisqueDto
        """
        return self._eruption_volcanique

    @eruption_volcanique.setter
    def eruption_volcanique(self, eruption_volcanique):
        """Sets the eruption_volcanique of this RisquesNaturelsDto.


        :param eruption_volcanique: The eruption_volcanique of this RisquesNaturelsDto.  # noqa: E501
        :type: RisqueDto
        """

        self._eruption_volcanique = eruption_volcanique

    @property
    def cyclone(self):
        """Gets the cyclone of this RisquesNaturelsDto.  # noqa: E501


        :return: The cyclone of this RisquesNaturelsDto.  # noqa: E501
        :rtype: RisqueDto
        """
        return self._cyclone

    @cyclone.setter
    def cyclone(self, cyclone):
        """Sets the cyclone of this RisquesNaturelsDto.


        :param cyclone: The cyclone of this RisquesNaturelsDto.  # noqa: E501
        :type: RisqueDto
        """

        self._cyclone = cyclone

    @property
    def radon(self):
        """Gets the radon of this RisquesNaturelsDto.  # noqa: E501


        :return: The radon of this RisquesNaturelsDto.  # noqa: E501
        :rtype: RisqueDto
        """
        return self._radon

    @radon.setter
    def radon(self, radon):
        """Sets the radon of this RisquesNaturelsDto.


        :param radon: The radon of this RisquesNaturelsDto.  # noqa: E501
        :type: RisqueDto
        """

        self._radon = radon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RisquesNaturelsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RisquesNaturelsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
