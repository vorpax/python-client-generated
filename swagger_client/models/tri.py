# coding: utf-8

"""
    Services API Géorisques

    Description de l'API de Géorisques  # noqa: E501

    OpenAPI spec version: 1.9.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Tri(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code_national_tri': 'str',
        'libelle_tri': 'str',
        'liste_libelle_risque': 'list[RisqueGaspar]',
        'libelle_bassin_risques': 'str',
        'date_arrete_pcb': 'date',
        'date_arrete_carte': 'date',
        'date_arrete_pcb_local': 'date',
        'date_arrete_prefet_parties_prenantes': 'date',
        'date_arrete_approbation': 'date',
        'date_arrete_national': 'date',
        'code_insee': 'str',
        'libelle_commune': 'str'
    }

    attribute_map = {
        'code_national_tri': 'code_national_tri',
        'libelle_tri': 'libelle_tri',
        'liste_libelle_risque': 'liste_libelle_risque',
        'libelle_bassin_risques': 'libelle_bassin_risques',
        'date_arrete_pcb': 'date_arrete_pcb',
        'date_arrete_carte': 'date_arrete_carte',
        'date_arrete_pcb_local': 'date_arrete_pcb_local',
        'date_arrete_prefet_parties_prenantes': 'date_arrete_prefet_parties_prenantes',
        'date_arrete_approbation': 'date_arrete_approbation',
        'date_arrete_national': 'date_arrete_national',
        'code_insee': 'code_insee',
        'libelle_commune': 'libelle_commune'
    }

    def __init__(self, code_national_tri=None, libelle_tri=None, liste_libelle_risque=None, libelle_bassin_risques=None, date_arrete_pcb=None, date_arrete_carte=None, date_arrete_pcb_local=None, date_arrete_prefet_parties_prenantes=None, date_arrete_approbation=None, date_arrete_national=None, code_insee=None, libelle_commune=None):  # noqa: E501
        """Tri - a model defined in Swagger"""  # noqa: E501
        self._code_national_tri = None
        self._libelle_tri = None
        self._liste_libelle_risque = None
        self._libelle_bassin_risques = None
        self._date_arrete_pcb = None
        self._date_arrete_carte = None
        self._date_arrete_pcb_local = None
        self._date_arrete_prefet_parties_prenantes = None
        self._date_arrete_approbation = None
        self._date_arrete_national = None
        self._code_insee = None
        self._libelle_commune = None
        self.discriminator = None
        if code_national_tri is not None:
            self.code_national_tri = code_national_tri
        if libelle_tri is not None:
            self.libelle_tri = libelle_tri
        if liste_libelle_risque is not None:
            self.liste_libelle_risque = liste_libelle_risque
        if libelle_bassin_risques is not None:
            self.libelle_bassin_risques = libelle_bassin_risques
        if date_arrete_pcb is not None:
            self.date_arrete_pcb = date_arrete_pcb
        if date_arrete_carte is not None:
            self.date_arrete_carte = date_arrete_carte
        if date_arrete_pcb_local is not None:
            self.date_arrete_pcb_local = date_arrete_pcb_local
        if date_arrete_prefet_parties_prenantes is not None:
            self.date_arrete_prefet_parties_prenantes = date_arrete_prefet_parties_prenantes
        if date_arrete_approbation is not None:
            self.date_arrete_approbation = date_arrete_approbation
        if date_arrete_national is not None:
            self.date_arrete_national = date_arrete_national
        if code_insee is not None:
            self.code_insee = code_insee
        if libelle_commune is not None:
            self.libelle_commune = libelle_commune

    @property
    def code_national_tri(self):
        """Gets the code_national_tri of this Tri.  # noqa: E501

        ${api.georisques.gaspar.tri.codenatazi.description}  # noqa: E501

        :return: The code_national_tri of this Tri.  # noqa: E501
        :rtype: str
        """
        return self._code_national_tri

    @code_national_tri.setter
    def code_national_tri(self, code_national_tri):
        """Sets the code_national_tri of this Tri.

        ${api.georisques.gaspar.tri.codenatazi.description}  # noqa: E501

        :param code_national_tri: The code_national_tri of this Tri.  # noqa: E501
        :type: str
        """

        self._code_national_tri = code_national_tri

    @property
    def libelle_tri(self):
        """Gets the libelle_tri of this Tri.  # noqa: E501

        ${api.georisques.gaspar.tri.libazi.description}  # noqa: E501

        :return: The libelle_tri of this Tri.  # noqa: E501
        :rtype: str
        """
        return self._libelle_tri

    @libelle_tri.setter
    def libelle_tri(self, libelle_tri):
        """Sets the libelle_tri of this Tri.

        ${api.georisques.gaspar.tri.libazi.description}  # noqa: E501

        :param libelle_tri: The libelle_tri of this Tri.  # noqa: E501
        :type: str
        """

        self._libelle_tri = libelle_tri

    @property
    def liste_libelle_risque(self):
        """Gets the liste_libelle_risque of this Tri.  # noqa: E501

        Détail du risque gaspar  # noqa: E501

        :return: The liste_libelle_risque of this Tri.  # noqa: E501
        :rtype: list[RisqueGaspar]
        """
        return self._liste_libelle_risque

    @liste_libelle_risque.setter
    def liste_libelle_risque(self, liste_libelle_risque):
        """Sets the liste_libelle_risque of this Tri.

        Détail du risque gaspar  # noqa: E501

        :param liste_libelle_risque: The liste_libelle_risque of this Tri.  # noqa: E501
        :type: list[RisqueGaspar]
        """

        self._liste_libelle_risque = liste_libelle_risque

    @property
    def libelle_bassin_risques(self):
        """Gets the libelle_bassin_risques of this Tri.  # noqa: E501

        Libellé bassin de risque  # noqa: E501

        :return: The libelle_bassin_risques of this Tri.  # noqa: E501
        :rtype: str
        """
        return self._libelle_bassin_risques

    @libelle_bassin_risques.setter
    def libelle_bassin_risques(self, libelle_bassin_risques):
        """Sets the libelle_bassin_risques of this Tri.

        Libellé bassin de risque  # noqa: E501

        :param libelle_bassin_risques: The libelle_bassin_risques of this Tri.  # noqa: E501
        :type: str
        """

        self._libelle_bassin_risques = libelle_bassin_risques

    @property
    def date_arrete_pcb(self):
        """Gets the date_arrete_pcb of this Tri.  # noqa: E501

        Arrêté du préfet coordonnateur de bassin  # noqa: E501

        :return: The date_arrete_pcb of this Tri.  # noqa: E501
        :rtype: date
        """
        return self._date_arrete_pcb

    @date_arrete_pcb.setter
    def date_arrete_pcb(self, date_arrete_pcb):
        """Sets the date_arrete_pcb of this Tri.

        Arrêté du préfet coordonnateur de bassin  # noqa: E501

        :param date_arrete_pcb: The date_arrete_pcb of this Tri.  # noqa: E501
        :type: date
        """

        self._date_arrete_pcb = date_arrete_pcb

    @property
    def date_arrete_carte(self):
        """Gets the date_arrete_carte of this Tri.  # noqa: E501

        Arrêté de la cartographie du TRI  # noqa: E501

        :return: The date_arrete_carte of this Tri.  # noqa: E501
        :rtype: date
        """
        return self._date_arrete_carte

    @date_arrete_carte.setter
    def date_arrete_carte(self, date_arrete_carte):
        """Sets the date_arrete_carte of this Tri.

        Arrêté de la cartographie du TRI  # noqa: E501

        :param date_arrete_carte: The date_arrete_carte of this Tri.  # noqa: E501
        :type: date
        """

        self._date_arrete_carte = date_arrete_carte

    @property
    def date_arrete_pcb_local(self):
        """Gets the date_arrete_pcb_local of this Tri.  # noqa: E501

        Arrêté de la stratégie locale  # noqa: E501

        :return: The date_arrete_pcb_local of this Tri.  # noqa: E501
        :rtype: date
        """
        return self._date_arrete_pcb_local

    @date_arrete_pcb_local.setter
    def date_arrete_pcb_local(self, date_arrete_pcb_local):
        """Sets the date_arrete_pcb_local of this Tri.

        Arrêté de la stratégie locale  # noqa: E501

        :param date_arrete_pcb_local: The date_arrete_pcb_local of this Tri.  # noqa: E501
        :type: date
        """

        self._date_arrete_pcb_local = date_arrete_pcb_local

    @property
    def date_arrete_prefet_parties_prenantes(self):
        """Gets the date_arrete_prefet_parties_prenantes of this Tri.  # noqa: E501

        Arrêté préfet, parties prenantes  # noqa: E501

        :return: The date_arrete_prefet_parties_prenantes of this Tri.  # noqa: E501
        :rtype: date
        """
        return self._date_arrete_prefet_parties_prenantes

    @date_arrete_prefet_parties_prenantes.setter
    def date_arrete_prefet_parties_prenantes(self, date_arrete_prefet_parties_prenantes):
        """Sets the date_arrete_prefet_parties_prenantes of this Tri.

        Arrêté préfet, parties prenantes  # noqa: E501

        :param date_arrete_prefet_parties_prenantes: The date_arrete_prefet_parties_prenantes of this Tri.  # noqa: E501
        :type: date
        """

        self._date_arrete_prefet_parties_prenantes = date_arrete_prefet_parties_prenantes

    @property
    def date_arrete_approbation(self):
        """Gets the date_arrete_approbation of this Tri.  # noqa: E501

        Arrêté d'approbation de la partie locale  # noqa: E501

        :return: The date_arrete_approbation of this Tri.  # noqa: E501
        :rtype: date
        """
        return self._date_arrete_approbation

    @date_arrete_approbation.setter
    def date_arrete_approbation(self, date_arrete_approbation):
        """Sets the date_arrete_approbation of this Tri.

        Arrêté d'approbation de la partie locale  # noqa: E501

        :param date_arrete_approbation: The date_arrete_approbation of this Tri.  # noqa: E501
        :type: date
        """

        self._date_arrete_approbation = date_arrete_approbation

    @property
    def date_arrete_national(self):
        """Gets the date_arrete_national of this Tri.  # noqa: E501

        Arrêté TRI national  # noqa: E501

        :return: The date_arrete_national of this Tri.  # noqa: E501
        :rtype: date
        """
        return self._date_arrete_national

    @date_arrete_national.setter
    def date_arrete_national(self, date_arrete_national):
        """Sets the date_arrete_national of this Tri.

        Arrêté TRI national  # noqa: E501

        :param date_arrete_national: The date_arrete_national of this Tri.  # noqa: E501
        :type: date
        """

        self._date_arrete_national = date_arrete_national

    @property
    def code_insee(self):
        """Gets the code_insee of this Tri.  # noqa: E501

        Identifiant unique INSEE de la commune  # noqa: E501

        :return: The code_insee of this Tri.  # noqa: E501
        :rtype: str
        """
        return self._code_insee

    @code_insee.setter
    def code_insee(self, code_insee):
        """Sets the code_insee of this Tri.

        Identifiant unique INSEE de la commune  # noqa: E501

        :param code_insee: The code_insee of this Tri.  # noqa: E501
        :type: str
        """

        self._code_insee = code_insee

    @property
    def libelle_commune(self):
        """Gets the libelle_commune of this Tri.  # noqa: E501

        Libellé de la commune  # noqa: E501

        :return: The libelle_commune of this Tri.  # noqa: E501
        :rtype: str
        """
        return self._libelle_commune

    @libelle_commune.setter
    def libelle_commune(self, libelle_commune):
        """Sets the libelle_commune of this Tri.

        Libellé de la commune  # noqa: E501

        :param libelle_commune: The libelle_commune of this Tri.  # noqa: E501
        :type: str
        """

        self._libelle_commune = libelle_commune

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tri, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tri):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
