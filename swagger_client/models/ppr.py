# coding: utf-8

"""
    Services API Géorisques

    Description de l'API de Géorisques  # noqa: E501

    OpenAPI spec version: 1.9.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PPR(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'etat': 'EtatPPR',
        'geom_zonage_by_list': 'list[Feature]',
        'geom_perimetre_by_list': 'list[Feature]',
        'id_gaspar': 'str',
        'nom_ppr': 'str',
        'date_approbation': 'date',
        'date_fin_validite': 'date',
        'risque': 'FamilleRisques',
        'libelle_commune': 'str',
        'geom_perimetre': 'OneOfPPRGeomPerimetre',
        'geom_zonage': 'OneOfPPRGeomZonage'
    }

    attribute_map = {
        'etat': 'etat',
        'geom_zonage_by_list': 'geomZonageByList',
        'geom_perimetre_by_list': 'geomPerimetreByList',
        'id_gaspar': 'id_gaspar',
        'nom_ppr': 'nom_ppr',
        'date_approbation': 'date_approbation',
        'date_fin_validite': 'date_fin_validite',
        'risque': 'risque',
        'libelle_commune': 'libelle_commune',
        'geom_perimetre': 'geom_perimetre',
        'geom_zonage': 'geom_zonage'
    }

    def __init__(self, etat=None, geom_zonage_by_list=None, geom_perimetre_by_list=None, id_gaspar=None, nom_ppr=None, date_approbation=None, date_fin_validite=None, risque=None, libelle_commune=None, geom_perimetre=None, geom_zonage=None):  # noqa: E501
        """PPR - a model defined in Swagger"""  # noqa: E501
        self._etat = None
        self._geom_zonage_by_list = None
        self._geom_perimetre_by_list = None
        self._id_gaspar = None
        self._nom_ppr = None
        self._date_approbation = None
        self._date_fin_validite = None
        self._risque = None
        self._libelle_commune = None
        self._geom_perimetre = None
        self._geom_zonage = None
        self.discriminator = None
        if etat is not None:
            self.etat = etat
        if geom_zonage_by_list is not None:
            self.geom_zonage_by_list = geom_zonage_by_list
        if geom_perimetre_by_list is not None:
            self.geom_perimetre_by_list = geom_perimetre_by_list
        if id_gaspar is not None:
            self.id_gaspar = id_gaspar
        if nom_ppr is not None:
            self.nom_ppr = nom_ppr
        if date_approbation is not None:
            self.date_approbation = date_approbation
        if date_fin_validite is not None:
            self.date_fin_validite = date_fin_validite
        if risque is not None:
            self.risque = risque
        if libelle_commune is not None:
            self.libelle_commune = libelle_commune
        if geom_perimetre is not None:
            self.geom_perimetre = geom_perimetre
        if geom_zonage is not None:
            self.geom_zonage = geom_zonage

    @property
    def etat(self):
        """Gets the etat of this PPR.  # noqa: E501


        :return: The etat of this PPR.  # noqa: E501
        :rtype: EtatPPR
        """
        return self._etat

    @etat.setter
    def etat(self, etat):
        """Sets the etat of this PPR.


        :param etat: The etat of this PPR.  # noqa: E501
        :type: EtatPPR
        """

        self._etat = etat

    @property
    def geom_zonage_by_list(self):
        """Gets the geom_zonage_by_list of this PPR.  # noqa: E501


        :return: The geom_zonage_by_list of this PPR.  # noqa: E501
        :rtype: list[Feature]
        """
        return self._geom_zonage_by_list

    @geom_zonage_by_list.setter
    def geom_zonage_by_list(self, geom_zonage_by_list):
        """Sets the geom_zonage_by_list of this PPR.


        :param geom_zonage_by_list: The geom_zonage_by_list of this PPR.  # noqa: E501
        :type: list[Feature]
        """

        self._geom_zonage_by_list = geom_zonage_by_list

    @property
    def geom_perimetre_by_list(self):
        """Gets the geom_perimetre_by_list of this PPR.  # noqa: E501


        :return: The geom_perimetre_by_list of this PPR.  # noqa: E501
        :rtype: list[Feature]
        """
        return self._geom_perimetre_by_list

    @geom_perimetre_by_list.setter
    def geom_perimetre_by_list(self, geom_perimetre_by_list):
        """Sets the geom_perimetre_by_list of this PPR.


        :param geom_perimetre_by_list: The geom_perimetre_by_list of this PPR.  # noqa: E501
        :type: list[Feature]
        """

        self._geom_perimetre_by_list = geom_perimetre_by_list

    @property
    def id_gaspar(self):
        """Gets the id_gaspar of this PPR.  # noqa: E501

        Identifiant unique d'un document PPR  # noqa: E501

        :return: The id_gaspar of this PPR.  # noqa: E501
        :rtype: str
        """
        return self._id_gaspar

    @id_gaspar.setter
    def id_gaspar(self, id_gaspar):
        """Sets the id_gaspar of this PPR.

        Identifiant unique d'un document PPR  # noqa: E501

        :param id_gaspar: The id_gaspar of this PPR.  # noqa: E501
        :type: str
        """

        self._id_gaspar = id_gaspar

    @property
    def nom_ppr(self):
        """Gets the nom_ppr of this PPR.  # noqa: E501

        Libellé du document PPR tel que précisé dans les documents officiels  # noqa: E501

        :return: The nom_ppr of this PPR.  # noqa: E501
        :rtype: str
        """
        return self._nom_ppr

    @nom_ppr.setter
    def nom_ppr(self, nom_ppr):
        """Sets the nom_ppr of this PPR.

        Libellé du document PPR tel que précisé dans les documents officiels  # noqa: E501

        :param nom_ppr: The nom_ppr of this PPR.  # noqa: E501
        :type: str
        """

        self._nom_ppr = nom_ppr

    @property
    def date_approbation(self):
        """Gets the date_approbation of this PPR.  # noqa: E501

        Date d'approbation du document PPR  # noqa: E501

        :return: The date_approbation of this PPR.  # noqa: E501
        :rtype: date
        """
        return self._date_approbation

    @date_approbation.setter
    def date_approbation(self, date_approbation):
        """Sets the date_approbation of this PPR.

        Date d'approbation du document PPR  # noqa: E501

        :param date_approbation: The date_approbation of this PPR.  # noqa: E501
        :type: date
        """

        self._date_approbation = date_approbation

    @property
    def date_fin_validite(self):
        """Gets the date_fin_validite of this PPR.  # noqa: E501

        Date de fin de validité du document PPR  # noqa: E501

        :return: The date_fin_validite of this PPR.  # noqa: E501
        :rtype: date
        """
        return self._date_fin_validite

    @date_fin_validite.setter
    def date_fin_validite(self, date_fin_validite):
        """Sets the date_fin_validite of this PPR.

        Date de fin de validité du document PPR  # noqa: E501

        :param date_fin_validite: The date_fin_validite of this PPR.  # noqa: E501
        :type: date
        """

        self._date_fin_validite = date_fin_validite

    @property
    def risque(self):
        """Gets the risque of this PPR.  # noqa: E501


        :return: The risque of this PPR.  # noqa: E501
        :rtype: FamilleRisques
        """
        return self._risque

    @risque.setter
    def risque(self, risque):
        """Sets the risque of this PPR.


        :param risque: The risque of this PPR.  # noqa: E501
        :type: FamilleRisques
        """

        self._risque = risque

    @property
    def libelle_commune(self):
        """Gets the libelle_commune of this PPR.  # noqa: E501

        Libellé de la commune concernée par un document PPR  # noqa: E501

        :return: The libelle_commune of this PPR.  # noqa: E501
        :rtype: str
        """
        return self._libelle_commune

    @libelle_commune.setter
    def libelle_commune(self, libelle_commune):
        """Sets the libelle_commune of this PPR.

        Libellé de la commune concernée par un document PPR  # noqa: E501

        :param libelle_commune: The libelle_commune of this PPR.  # noqa: E501
        :type: str
        """

        self._libelle_commune = libelle_commune

    @property
    def geom_perimetre(self):
        """Gets the geom_perimetre of this PPR.  # noqa: E501


        :return: The geom_perimetre of this PPR.  # noqa: E501
        :rtype: OneOfPPRGeomPerimetre
        """
        return self._geom_perimetre

    @geom_perimetre.setter
    def geom_perimetre(self, geom_perimetre):
        """Sets the geom_perimetre of this PPR.


        :param geom_perimetre: The geom_perimetre of this PPR.  # noqa: E501
        :type: OneOfPPRGeomPerimetre
        """

        self._geom_perimetre = geom_perimetre

    @property
    def geom_zonage(self):
        """Gets the geom_zonage of this PPR.  # noqa: E501


        :return: The geom_zonage of this PPR.  # noqa: E501
        :rtype: OneOfPPRGeomZonage
        """
        return self._geom_zonage

    @geom_zonage.setter
    def geom_zonage(self, geom_zonage):
        """Sets the geom_zonage of this PPR.


        :param geom_zonage: The geom_zonage of this PPR.  # noqa: E501
        :type: OneOfPPRGeomZonage
        """

        self._geom_zonage = geom_zonage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PPR, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PPR):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
