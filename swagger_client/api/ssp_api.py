# coding: utf-8

"""
    Services API Géorisques

    Description de l'API de Géorisques  # noqa: E501

    OpenAPI spec version: 1.9.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SSPApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def recherche_casias(self, **kwargs):  # noqa: E501
        """Lister les Cartes des Anciens Sites Industriels et Activités de Services  # noqa: E501

        Ce service permet de lister les différents CASIAS, suivant une emprise spatiale définie, à savoir un rayon de recherche pour un point défini, une ou plusieurs communes, une région ou un département.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recherche_casias(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rayon: Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
        :param str latlon: Saisir un point sous la forme longitude,latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
        :param str code_insee: Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee=45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon, à la région ou au département.
        :param int page: Numéro de la page
        :param int page_size: Taille des pages
        :param str code_region: Le code de la région recherchée
        :param str code_departement: Le code du département recherché
        :param str date_maj: Date de mise à jour des données. La date est au format \"AAAA-MM-JJ\". L'API renvoie toutes les données dont la date de modification est supérieure ou égale à date_maj.
        :return: PaginatedResponseCasiasDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recherche_casias_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.recherche_casias_with_http_info(**kwargs)  # noqa: E501
            return data

    def recherche_casias_with_http_info(self, **kwargs):  # noqa: E501
        """Lister les Cartes des Anciens Sites Industriels et Activités de Services  # noqa: E501

        Ce service permet de lister les différents CASIAS, suivant une emprise spatiale définie, à savoir un rayon de recherche pour un point défini, une ou plusieurs communes, une région ou un département.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recherche_casias_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rayon: Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
        :param str latlon: Saisir un point sous la forme longitude,latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
        :param str code_insee: Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee=45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon, à la région ou au département.
        :param int page: Numéro de la page
        :param int page_size: Taille des pages
        :param str code_region: Le code de la région recherchée
        :param str code_departement: Le code du département recherché
        :param str date_maj: Date de mise à jour des données. La date est au format \"AAAA-MM-JJ\". L'API renvoie toutes les données dont la date de modification est supérieure ou égale à date_maj.
        :return: PaginatedResponseCasiasDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rayon', 'latlon', 'code_insee', 'page', 'page_size', 'code_region', 'code_departement', 'date_maj']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recherche_casias" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rayon' in params:
            query_params.append(('rayon', params['rayon']))  # noqa: E501
        if 'latlon' in params:
            query_params.append(('latlon', params['latlon']))  # noqa: E501
        if 'code_insee' in params:
            query_params.append(('code_insee', params['code_insee']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'code_region' in params:
            query_params.append(('code_region', params['code_region']))  # noqa: E501
        if 'code_departement' in params:
            query_params.append(('code_departement', params['code_departement']))  # noqa: E501
        if 'date_maj' in params:
            query_params.append(('date_maj', params['date_maj']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/ssp/casias', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedResponseCasiasDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def recherche_ex_basol(self, **kwargs):  # noqa: E501
        """Lister les informations de l'administration concernant une pollution suspectée ou avérée (ex-BASOL)  # noqa: E501

        Ce service permet de lister les différents ex-BASOL, suivant une emprise spatiale définie, à savoir un rayon de recherche pour un point défini, une ou plusieurs communes, une région ou un département.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recherche_ex_basol(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rayon: Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
        :param str latlon: Saisir un point sous la forme longitude,latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
        :param str code_insee: Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee=45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon, à la région ou au département.
        :param int page: Numéro de la page
        :param int page_size: Taille des pages
        :param str code_region: Le code de la région recherchée
        :param str code_departement: Le code du département recherché
        :param str date_maj: Date de mise à jour des données. La date est au format \"AAAA-MM-JJ\". L'API renvoie toutes les données dont la date de modification est supérieure ou égale à date_maj.
        :return: PaginatedResponseExBasolDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recherche_ex_basol_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.recherche_ex_basol_with_http_info(**kwargs)  # noqa: E501
            return data

    def recherche_ex_basol_with_http_info(self, **kwargs):  # noqa: E501
        """Lister les informations de l'administration concernant une pollution suspectée ou avérée (ex-BASOL)  # noqa: E501

        Ce service permet de lister les différents ex-BASOL, suivant une emprise spatiale définie, à savoir un rayon de recherche pour un point défini, une ou plusieurs communes, une région ou un département.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recherche_ex_basol_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rayon: Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
        :param str latlon: Saisir un point sous la forme longitude,latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
        :param str code_insee: Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee=45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon, à la région ou au département.
        :param int page: Numéro de la page
        :param int page_size: Taille des pages
        :param str code_region: Le code de la région recherchée
        :param str code_departement: Le code du département recherché
        :param str date_maj: Date de mise à jour des données. La date est au format \"AAAA-MM-JJ\". L'API renvoie toutes les données dont la date de modification est supérieure ou égale à date_maj.
        :return: PaginatedResponseExBasolDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rayon', 'latlon', 'code_insee', 'page', 'page_size', 'code_region', 'code_departement', 'date_maj']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recherche_ex_basol" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rayon' in params:
            query_params.append(('rayon', params['rayon']))  # noqa: E501
        if 'latlon' in params:
            query_params.append(('latlon', params['latlon']))  # noqa: E501
        if 'code_insee' in params:
            query_params.append(('code_insee', params['code_insee']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'code_region' in params:
            query_params.append(('code_region', params['code_region']))  # noqa: E501
        if 'code_departement' in params:
            query_params.append(('code_departement', params['code_departement']))  # noqa: E501
        if 'date_maj' in params:
            query_params.append(('date_maj', params['date_maj']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/ssp/instructions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedResponseExBasolDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def recherche_globale(self, **kwargs):  # noqa: E501
        """Lister les données CASIAS, ex-BASOL, SIS et SUP.  # noqa: E501

        Ce service permet de lister les différents CASIAS, ex-BASOL, SIS et SUP, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes, une région ou un département.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recherche_globale(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rayon: Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
        :param str latlon: Saisir un point sous la forme longitude,latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
        :param str code_insee: Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee=45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon, à la région ou au département.
        :param int page: Numéro de la page
        :param int page_size: Taille des pages
        :param str code_region: Le code de la région recherchée
        :param str code_departement: Le code du département recherché
        :param str date_maj: Date de mise à jour des données. La date est au format \"AAAA-MM-JJ\". L'API renvoie toutes les données dont la date de modification est supérieure ou égale à date_maj.
        :return: Ssp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recherche_globale_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.recherche_globale_with_http_info(**kwargs)  # noqa: E501
            return data

    def recherche_globale_with_http_info(self, **kwargs):  # noqa: E501
        """Lister les données CASIAS, ex-BASOL, SIS et SUP.  # noqa: E501

        Ce service permet de lister les différents CASIAS, ex-BASOL, SIS et SUP, suivant une emprise spatiale définie, à  savoir un rayon de recherche pour un point défini, une ou plusieurs communes, une région ou un département.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recherche_globale_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rayon: Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
        :param str latlon: Saisir un point sous la forme longitude,latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
        :param str code_insee: Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee=45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon, à la région ou au département.
        :param int page: Numéro de la page
        :param int page_size: Taille des pages
        :param str code_region: Le code de la région recherchée
        :param str code_departement: Le code du département recherché
        :param str date_maj: Date de mise à jour des données. La date est au format \"AAAA-MM-JJ\". L'API renvoie toutes les données dont la date de modification est supérieure ou égale à date_maj.
        :return: Ssp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rayon', 'latlon', 'code_insee', 'page', 'page_size', 'code_region', 'code_departement', 'date_maj']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recherche_globale" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rayon' in params:
            query_params.append(('rayon', params['rayon']))  # noqa: E501
        if 'latlon' in params:
            query_params.append(('latlon', params['latlon']))  # noqa: E501
        if 'code_insee' in params:
            query_params.append(('code_insee', params['code_insee']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'code_region' in params:
            query_params.append(('code_region', params['code_region']))  # noqa: E501
        if 'code_departement' in params:
            query_params.append(('code_departement', params['code_departement']))  # noqa: E501
        if 'date_maj' in params:
            query_params.append(('date_maj', params['date_maj']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/ssp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ssp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def recherche_sis(self, **kwargs):  # noqa: E501
        """Lister les Secteurs d'Information sur les Sols  # noqa: E501

        Ce service permet de lister les différents SIS, suivant une emprise spatiale définie, à savoir un rayon de recherche pour un point défini, une ou plusieurs communes, une région ou un département.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recherche_sis(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rayon: Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
        :param str latlon: Saisir un point sous la forme longitude,latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
        :param str code_insee: Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee=45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon, à la région ou au département.
        :param int page: Numéro de la page
        :param int page_size: Taille des pages
        :param str code_region: Le code de la région recherchée
        :param str code_departement: Le code du département recherché
        :param str date_maj: Date de mise à jour des données. La date est au format \"AAAA-MM-JJ\". L'API renvoie toutes les données dont la date de modification est supérieure ou égale à date_maj.
        :return: PaginatedResponseSisDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recherche_sis_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.recherche_sis_with_http_info(**kwargs)  # noqa: E501
            return data

    def recherche_sis_with_http_info(self, **kwargs):  # noqa: E501
        """Lister les Secteurs d'Information sur les Sols  # noqa: E501

        Ce service permet de lister les différents SIS, suivant une emprise spatiale définie, à savoir un rayon de recherche pour un point défini, une ou plusieurs communes, une région ou un département.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recherche_sis_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rayon: Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
        :param str latlon: Saisir un point sous la forme longitude,latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
        :param str code_insee: Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee=45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon, à la région ou au département.
        :param int page: Numéro de la page
        :param int page_size: Taille des pages
        :param str code_region: Le code de la région recherchée
        :param str code_departement: Le code du département recherché
        :param str date_maj: Date de mise à jour des données. La date est au format \"AAAA-MM-JJ\". L'API renvoie toutes les données dont la date de modification est supérieure ou égale à date_maj.
        :return: PaginatedResponseSisDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rayon', 'latlon', 'code_insee', 'page', 'page_size', 'code_region', 'code_departement', 'date_maj']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recherche_sis" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rayon' in params:
            query_params.append(('rayon', params['rayon']))  # noqa: E501
        if 'latlon' in params:
            query_params.append(('latlon', params['latlon']))  # noqa: E501
        if 'code_insee' in params:
            query_params.append(('code_insee', params['code_insee']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'code_region' in params:
            query_params.append(('code_region', params['code_region']))  # noqa: E501
        if 'code_departement' in params:
            query_params.append(('code_departement', params['code_departement']))  # noqa: E501
        if 'date_maj' in params:
            query_params.append(('date_maj', params['date_maj']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/ssp/conclusions_sis', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedResponseSisDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def recherche_sup(self, **kwargs):  # noqa: E501
        """Lister les Servitudes d'Utilité Publique  # noqa: E501

        Ce service permet de lister les différents SUP, suivant une emprise spatiale définie, à savoir un rayon de recherche pour un point défini, une ou plusieurs communes, une région ou un département.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recherche_sup(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rayon: Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
        :param str latlon: Saisir un point sous la forme longitude,latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
        :param str code_insee: Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee=45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon, à la région ou au département.
        :param int page: Numéro de la page
        :param int page_size: Taille des pages
        :param str code_region: Le code de la région recherchée
        :param str code_departement: Le code du département recherché
        :param str date_maj: Date de mise à jour des données. La date est au format \"AAAA-MM-JJ\". L'API renvoie toutes les données dont la date de modification est supérieure ou égale à date_maj.
        :return: PaginatedResponseSupDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recherche_sup_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.recherche_sup_with_http_info(**kwargs)  # noqa: E501
            return data

    def recherche_sup_with_http_info(self, **kwargs):  # noqa: E501
        """Lister les Servitudes d'Utilité Publique  # noqa: E501

        Ce service permet de lister les différents SUP, suivant une emprise spatiale définie, à savoir un rayon de recherche pour un point défini, une ou plusieurs communes, une région ou un département.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recherche_sup_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int rayon: Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à  10 000 mètres. Par défaut le rayon de recherche est fixé à  1000 mètres.
        :param str latlon: Saisir un point sous la forme longitude,latitude. Le séparateur de décimales est toujours le point. La paire de coordonnées est séparée par une virgule. exemple : 2.29253,48.92572
        :param str code_insee: Code(s) INSEE de la commune, si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee=45234,45100, le nombre maximum de code est 10. Ce type de recherche ne peut pas être combinée avec une recherche au rayon, à la région ou au département.
        :param int page: Numéro de la page
        :param int page_size: Taille des pages
        :param str code_region: Le code de la région recherchée
        :param str code_departement: Le code du département recherché
        :param str date_maj: Date de mise à jour des données. La date est au format \"AAAA-MM-JJ\". L'API renvoie toutes les données dont la date de modification est supérieure ou égale à date_maj.
        :return: PaginatedResponseSupDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rayon', 'latlon', 'code_insee', 'page', 'page_size', 'code_region', 'code_departement', 'date_maj']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recherche_sup" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rayon' in params:
            query_params.append(('rayon', params['rayon']))  # noqa: E501
        if 'latlon' in params:
            query_params.append(('latlon', params['latlon']))  # noqa: E501
        if 'code_insee' in params:
            query_params.append(('code_insee', params['code_insee']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'code_region' in params:
            query_params.append(('code_region', params['code_region']))  # noqa: E501
        if 'code_departement' in params:
            query_params.append(('code_departement', params['code_departement']))  # noqa: E501
        if 'date_maj' in params:
            query_params.append(('date_maj', params['date_maj']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/ssp/conclusions_sup', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedResponseSupDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
