# coding: utf-8

"""
    Services API Géorisques

    Description de l'API de Géorisques  # noqa: E501

    OpenAPI spec version: 1.9.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MVTApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def recherche_risques1(self, **kwargs):  # noqa: E501
        """Cette interface est conçue pour diffuser les données sur le mouvement de terrain.  # noqa: E501

        Cette interface est conçue pour diffuser les données sur le mouvement de terrain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recherche_risques1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float rayon: Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à 10 000 mètres. Par defaut le rayon de recherche est fixé a 1000 mètres.
        :param str latlon: Saisir un point sous la forme longitude,latitude. Le séparateur de décimales est toujours un point. La paire de coordonnées est separée par une virgule. Exemple : 1.939266,47.861961
        :param str code_insee: Code(s) INSEE de la commune. Si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee=45234,45100. Le nombre maximum de codes est 10. Ce type de recherche ne peut pas être combiné avec une recherche au rayon.
        :param int page: Numéro de la page
        :param int page_size: Taille des pages
        :param str region: Le code de la région recherchée
        :param str departement: Le code du département recherché
        :param str identifiant: Identifiant du mouvement
        :param str type: Type de mouvement de terrain                   <br>- Effondrement / Affaissement <br>- Coulée <br>- Glissement <br>- Erosion de berges <br>- Chute de blocs / Eboulement
        :param str fiabilite: Type de fiabilité                                    <br>- Faible <br>- Moyen <br>- Fort
        :return: PaginatedResponseMvt
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.recherche_risques1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.recherche_risques1_with_http_info(**kwargs)  # noqa: E501
            return data

    def recherche_risques1_with_http_info(self, **kwargs):  # noqa: E501
        """Cette interface est conçue pour diffuser les données sur le mouvement de terrain.  # noqa: E501

        Cette interface est conçue pour diffuser les données sur le mouvement de terrain.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.recherche_risques1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float rayon: Saisir un rayon de recherche exprimé en mètres. Attention la valeur du rayon de recherche est limitée à 10 000 mètres. Par defaut le rayon de recherche est fixé a 1000 mètres.
        :param str latlon: Saisir un point sous la forme longitude,latitude. Le séparateur de décimales est toujours un point. La paire de coordonnées est separée par une virgule. Exemple : 1.939266,47.861961
        :param str code_insee: Code(s) INSEE de la commune. Si plusieurs codes communes, séparer les codes communes par une virgule, par exemple pour avoir les codes insee 45234 et 45100 : code_insee=45234,45100. Le nombre maximum de codes est 10. Ce type de recherche ne peut pas être combiné avec une recherche au rayon.
        :param int page: Numéro de la page
        :param int page_size: Taille des pages
        :param str region: Le code de la région recherchée
        :param str departement: Le code du département recherché
        :param str identifiant: Identifiant du mouvement
        :param str type: Type de mouvement de terrain                   <br>- Effondrement / Affaissement <br>- Coulée <br>- Glissement <br>- Erosion de berges <br>- Chute de blocs / Eboulement
        :param str fiabilite: Type de fiabilité                                    <br>- Faible <br>- Moyen <br>- Fort
        :return: PaginatedResponseMvt
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rayon', 'latlon', 'code_insee', 'page', 'page_size', 'region', 'departement', 'identifiant', 'type', 'fiabilite']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recherche_risques1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rayon' in params:
            query_params.append(('rayon', params['rayon']))  # noqa: E501
        if 'latlon' in params:
            query_params.append(('latlon', params['latlon']))  # noqa: E501
        if 'code_insee' in params:
            query_params.append(('code_insee', params['code_insee']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'region' in params:
            query_params.append(('region', params['region']))  # noqa: E501
        if 'departement' in params:
            query_params.append(('departement', params['departement']))  # noqa: E501
        if 'identifiant' in params:
            query_params.append(('identifiant', params['identifiant']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'fiabilite' in params:
            query_params.append(('fiabilite', params['fiabilite']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/mvt', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaginatedResponseMvt',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
